<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Software | Eric Duncan]]></title>
  <link href="http://eduncan911.com/category/software/atom.xml" rel="self"/>
  <link href="http://eduncan911.com/"/>
  <updated>2017-05-30T15:26:21-04:00</updated>
  <id>http://eduncan911.com/</id>
  <author>
    <name><![CDATA[Eric Duncan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to Enable Bash on Windows 10 Preview]]></title>
    <link href="http://eduncan911.com/software/how-to-enable-bash-on-windows-10-preview.html"/>
    <updated>2016-04-03T13:13:34-04:00</updated>
    <id>http://eduncan911.com/software/how-to-enable-bash-on-windows-10-preview</id>
    <content type="html"><![CDATA[<p>Today I am going to outline how you can install and use the <a href="http://www.hanselman.com/blog/DevelopersCanRunBashShellAndUsermodeUbuntuLinuxBinariesOnWindows10.aspx">Linux User Mode
(UML)</a>
in Windows 10 based on the new <a href="https://blogs.windows.com/buildingapps/2016/03/30/run-bash-on-ubuntu-on-windows/">Windows Subsystem for Linux
(WSL)</a>
that was announced at Windows Build 2016.</p>

<h2>Why Bother?  OS X works fine.</h2>

<p>I am writing this jamming away on my Macbook Pro 15" connected to three external
1080p 120 Hz 3D monitors, my precision mouse and CODE mechanical keyboard.  Once
running ArchLinux for over a year, I&rsquo;ve recently went back to OS X purely for
the user experience.  I miss my Arch installs; but, I don&rsquo;t miss the annoyances
around docking/undocking my tri-monitor setup and switching from HiDPI and my
1080p monitors.  It was a painful experience when disconnecting and reconnecting.</p>

<p>I also ran Windows 10 natively on it for a few months as I got annoyed at VMware
crashing Arch all the time.  I was doing my C# Mono work in my Linux VM anyways
and not natively on Windows.  Battery life sucked with the VM though.</p>

<p>OS X just nails HiDPI perfectly when docking and undocking, switching primary
monitors, etc.</p>

<p>No.  The real reason I am interested in Linux on Windows is:</p>

<ul>
<li>Going back to Desktop Development</li>
</ul>


<p>I have a 4.8 Ghz hex-core, 5300+ GPU core gaming beast of a machine (also
connected to those same 3 monitors) just sitting idle, unused for months.
ArchLinux natively on that Asus motherboard was ok; but, I miss my Windows games
and no longer could control my TEC waterchiller (it was Windows software I wrote
for it).</p>

<p>All Windows was missing was my GNU Linux tooling.  I spent the better part of a
week replacing all OS X versions of the tools (sed, ack, grep, etc) with the
real GNU versions.  OS X has Homebrew; Windows now has WSL.</p>

<p>To have the ability to have Linux natively available on Windows is just perfect
for my desktop machine.</p>

<p>I only develop using NeoVim + Tmux anyhow; so, I don&rsquo;t need GUI or Windows
interactions.  I just need bash and proper screen redraw with 256 colors.<br/>
That&rsquo;s it.</p>

<h2>WSL and Linux User Mode RTM Release Date</h2>

<p>It was suspiciously awkward that nothing made note of its availability; not from
the keynote nor from Hanselman&rsquo;s and MSDN&rsquo;s introduction blog posts.  All that
was said was that the Windows 10 Insider Preview refresh released in January
2016 contained this new WSL platform, and that the bash tooling would be
released for it soon.  There was even a Windows Insider/dev that noticed the new
WSL binaries/framework available back in January, before it was announced.</p>

<p>So a few of us kept poking and prodding at our MS resources, trying to get our
hands on it.</p>

<p>It turns out that you have to take a few initiatives to get your system ready
for UML.  This experience has taught me the <em>new</em> way in which MS will be
releasing features into Windows going forward.</p>

<h2>Enough Already, How to Install It?</h2>

<p>First, you can&rsquo;t install it on your existing Windows 10.  Not for some time, not
until it is ready for public consumption.  Currently Microsoft has said it will
be part of the Anniversary build due out this summer.</p>

<p>This post is about getting access to the Insider Preview edition, before it is
released.</p>

<p>Here&rsquo;s the overview of what you need to do:</p>

<ul>
<li>Download Windows Insider Preview 14295 (14316 ISO is not out as of the time
this writing.  But there is a Windows Update to upgrade to 14316).</li>
<li>Install it (recommended in a VM, as Previews usually expire).</li>
<li>Go straight to Start &ndash;> Settings &ndash;> Updates and Security.</li>
<li>Under &ldquo;Update settings&rdquo;, click Advanced options.</li>
<li>Under &ldquo;Get Insider Preview Builds&rdquo;, click &ldquo;Fix me&rdquo; or whatever may show here.</li>
</ul>


<p>You should end up with a slider, asking you to <em>Choose your insider level</em>.
Like this:</p>

<p><img src="/blog/images/windows-insider-preview-builds.png" alt="Windows Insider Preview slider level" /></p>

<p>Move it all the way to the right, for <em>Fast</em>.</p>

<p>The next series of mouse-contortions is to turn on <em>Developer Mode</em>.</p>

<ul>
<li>Start &ndash;> Settings &ndash;> Update &amp; security</li>
<li>On the left, click <strong>For developers</strong></li>
<li>Select the option for <strong>Developer mode</strong></li>
<li>Restart.</li>
</ul>


<p>You should be able to run Windows Update and see that <strong>Windows 10 Insider Preview 14316</strong> is available.</p>

<p><img src="/blog/images/windows-insider-preview-build-14316.png" alt="Windows 10 Insider Preview 14316 Update" /></p>

<p>Download and install.  You may want to go make some tea.</p>

<p>Another set of mouse-ninja-moves is to add the Bash features:</p>

<ul>
<li>click <strong>Start</strong> and type <em>&ldquo;Windows Features&rdquo;</em> and choose <em>&ldquo;Turn Windows
features on or off&rdquo;</em></li>
<li>scroll down and enable <strong><em>&ldquo;Windows Subsystem for Linux (Beta)&rdquo;</em></strong></li>
<li>Click OK and Restart.</li>
</ul>


<p><img src="/blog/images/windows-subsystem-for-linux-enabling.png" alt="Enabling Windows Subsystem for Linux" /></p>

<h2>Install Bash on Ubuntu On Windows</h2>

<p>If only we were done.  We now need to download and install the <strong><em>Bash on Ubuntu
on Windows</em></strong> desktop application, which currently seems to be done via a &ldquo;bash&rdquo;
command line utility.</p>

<ul>
<li>Launch Console (Start &ndash;> type &ldquo;CMD&rdquo; and press Enter)</li>
<li>Enter &ldquo;bash&rdquo; at the prompt and press &ldquo;Enter&rdquo;.</li>
<li>Follow the prompt to download and install Ubuntu 14.04 LTS ISO.</li>
<li>Once done, <strong><em>REBOOT</em></strong> (or at least I did).</li>
</ul>


<p>Once rebooted, you now have a new Desktop app you can launch called <strong><em>Bash on
Ubuntu on Windows</em></strong></p>

<p><img src="/blog/images/windows-bash-on-ubuntu-on-windows-subsystem-for-linux.png" alt="Bash on Ubuntu on Windows desktop app" /></p>

<p>I thought once I hit &ldquo;y&rdquo; to install bash, I was in bash.  It sure seemed like it
but I had a few issues poking around.  I went ahead and rebooted and noticed
a new app was installed.</p>

<h2>Quirky</h2>

<p>A number of things weren&rsquo;t working with my default installation.  I&rsquo;ll work on
those and will update this post, or create another walk-through.</p>

<p>Stay tuned!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fix Slow Scrolling in VIM and Neovim]]></title>
    <link href="http://eduncan911.com/software/fix-slow-scrolling-in-vim-and-neovim.html"/>
    <updated>2016-04-01T12:43:22-04:00</updated>
    <id>http://eduncan911.com/software/fix-slow-scrolling-in-vim-and-neovim</id>
    <content type="html"><![CDATA[<p>I am three months into my (4th) new development environment that I have bounced
around over the last three decades.  I finally put in the time to learn
vim/neovim to get away from graphical IDEs and return back to shell development.
With this brings a whole new timesuck of constantly tweaking your <code>.vimrc</code> to
the never reaching goal of perfection.</p>

<p>Now that I have my plugins and environments setup, I recently enabled a setting
to help me find my cursor faster in my <code>.vimrc</code> file.</p>

<pre><code>set cursorline
</code></pre>

<p>I was warned in the vim documentation that <em>&ldquo;Will make screen redrawing
slower.&rdquo;</em>  Little did I know just how slow it would make it crawl! I first
noticed it with neovim.  To confirm it wasn&rsquo;t neovim itself, I attempted to load
vim with the same config and oh wow how horrible slow things scrolled.  CPU
usage of both neovim and vim spiked to 99% on OS X under iterm2 and tmux.</p>

<p>The issue is exasperated when you increase your keyboard&rsquo;s key repeat and
shorten the repeat delay.  OS X is not fast enough for me; so, I have to use
<em>Karabiner</em>&rsquo;s Key Repeat feature to speed things up greatly (Delay @ 150ms, Key
Repeat at 10ms is just right).</p>

<p>A few quick Google searches surfaced the issue: <code>cursorline</code>, and similar
<code>cursorcolumn</code> was the issue when you have a plugin that highlights a bunch of
text.  Most people were having issues with Ruby&rsquo;s code plugins.</p>

<p>I was using <code>vim-go</code>, and its highlighting, when I noticed the issue.</p>

<p>This <a href="http://stackoverflow.com/a/20519492/56693">Stackoverflow answer</a> is, as the comments say,
a lifesaver.  Basically it outlines the very reason why scrolling is slow and
how to debug exactly what regex pattern is causing it.</p>

<h2>How to Debug Slow Scrolling in VIM</h2>

<p>You can debug what is slowing things down by first enabling the vim option
called <code>syntime</code> which is adequately defined as <em>&ldquo;When scrolling is slow.&rdquo;</em></p>

<pre><code>:syntime on
</code></pre>

<p>Then scroll up and down a lot, get it to bog down.  I also recommend doing this
within vim instead of neovim to really make things slow.  After 10 seconds or
so, generate a report with the following.</p>

<pre><code>:syntime report
</code></pre>

<p>For me, here&rsquo;s the top 10 results when a <code>FileType</code> of <code>go</code> was being scrolled:</p>

<pre><code>TOTAL      COUNT  MATCH   SLOWEST     AVERAGE   NAME               PATTERN
2.482624   7066   0       0.009561    0.000351  goInterfaceDef     \(type\s\+\)\@&lt;=\w\+\(\s\+interface\s\+{\)\@=
2.476090   7066   0       0.008820    0.000350  goStructDef        \(type\s\+\)\@&lt;=\w\+\(\s\+struct\s\+{\)\@=
2.457858   7278   212     0.008375    0.000338  goFunction         \(func\s\+\)\@&lt;=\w\+\((\)\@=
2.440439   7066   0       0.007554    0.000345  goFunction         \()\s\+\)\@&lt;=\w\+\((\)\@=
0.757577   7180   114     0.001380    0.000106  goInterface        \(.\)\@&lt;=\w\+\({\)\@=
0.745827   7104   38      0.001105    0.000105  goStruct           \(.\)\@&lt;=\w\+\({\)\@=
0.640945   7064   0       0.004620    0.000091  goSpaceError       \(\(^\|[={(,;]\)\s*&lt;-\)\@&lt;=\s\+
0.223065   12827  5910    0.000239    0.000017  goMethod           \(\.\)\@&lt;=\w\+\((\)\@=
0.071478   7064   0       0.000128    0.000010  goSpaceError       \(\(&lt;-\)\@&lt;!\&lt;chan\&gt;\)\@&lt;=\s\+\(&lt;-\)\@=
0.058679   7064   0       0.000100    0.000008  goSpaceError       \(\(\&lt;chan\&gt;\)\@&lt;!&lt;-\)\@&lt;=\s\+\(\&lt;chan\&gt;\)\@=
</code></pre>

<p>Immediately you can see it is <code>vim-go</code>&rsquo;s regex patterns that is slowing down the
scrolling.  Interesting how there were two <code>goFunction</code> regex patterns caught,
and both are slow.</p>

<p>At first glance, there doesn&rsquo;t seem to be any big issues with them.  Just a lot
of matching.  Running the first one through regex101.com shows the following
definition:</p>

<pre><code>/\(type\s\+\)\@&lt;=\w\+\(\s\+interface\s\+{\)\@=/
\( matches the character ( literally
type matches the characters type literally (case sensitive)
\s match any white space character [\r\n\t\f ]
\+ matches the character + literally
\) matches the character ) literally
\@ matches the character @ literally
&lt;= matches the characters &lt;= literally
\w match any word character [a-zA-Z0-9_]
\+ matches the character + literally
\( matches the character ( literally
\s match any white space character [\r\n\t\f ]
\+ matches the character + literally
interface matches the characters interface literally (case sensitive)
\s match any white space character [\r\n\t\f ]
\+ matches the character + literally
{ matches the character { literally
\) matches the character ) literally
\@ matches the character @ literally
= matches the character = literally
</code></pre>

<p>That is a lot of matching in a single regex!  Perhaps vim&rsquo;s regex interrupter is
just that bad.  I notice a significant speedup when using Neovim over Vim; but,
it is still very slow.</p>

<h2>The Fix for Slow Scrolling in VIM</h2>

<p>Now, I could spend some time debugging this regex, inserting conditionals and
groupings in an attempt to limit the amount of matching which should in theory
speed that up.  But I need to get some work done.</p>

<p>One could just toggle off <code>cursorline</code> when it is slow and move on and toggle it
back on with the same command later.  Set it to a mapped key to make it faster.</p>

<pre><code>:set cursorline!
</code></pre>

<p>An option that I found in the help that does speed things up is <code>lazyredraw</code>.<br/>
Though, it is tolerable with Neovim, vim was still a little bit choppy.  I have
this enabled as default in my <code>.vimrc</code> regardless.</p>

<pre><code>:set lazyredraw
</code></pre>

<p>Some people have gotten success by disabling syntax highlighting after 128
columns and/or minlines set to 256.  Neither worked for my environment though.</p>

<pre><code>set synmaxcol=128
syntax sync minlines=256
</code></pre>

<p>Personally, I just disabled some of (but not all of) <code>vim-go</code>&rsquo;s syntax
highlighting because I visually value the  <code>cursorline</code> highlighting more
than syntax highlight.  Besides, <a href="https://groups.google.com/forum/#!msg/golang-nuts/hJHCAaiL0so/kG3BHV6QFfIJ">Rob Pike calls syntax highlighting
juvenile</a>.</p>

<p>This option is very <code>plugin</code> specific; so, your mileage will vary of rather
your vim plugin supports selective disabling of syntax highlighting.</p>

<p>For <code>vim-go</code>, they have highlighting disabled by default and you must explicitly
enable it.  To disable syntax highlighting, just remove what you did to enable it
in the first place in your <code>.vimrc</code>:</p>

<p><code>
function! VimGoSetup()
  " vim-go related mappings
  au FileType go nmap &lt;Leader&gt;r &lt;Plug&gt;(go-run)
  au FileType go nmap &lt;Leader&gt;b &lt;Plug&gt;(go-build)
  au FileType go nmap &lt;Leader&gt;t &lt;Plug&gt;(go-test)
  au FileType go nmap &lt;Leader&gt;i &lt;Plug&gt;(go-info)
  au FileType go nmap &lt;Leader&gt;s &lt;Plug&gt;(go-implements)
  au FileType go nmap &lt;Leader&gt;c &lt;Plug&gt;(go-coverage)
  au FileType go nmap &lt;Leader&gt;e &lt;Plug&gt;(go-rename)
  au FileType go nmap &lt;Leader&gt;gi &lt;Plug&gt;(go-imports)
  au FileType go nmap &lt;Leader&gt;gI &lt;Plug&gt;(go-install)
  au FileType go nmap &lt;Leader&gt;gd &lt;Plug&gt;(go-doc)
  au FileType go nmap &lt;Leader&gt;gv &lt;Plug&gt;(go-doc-vertical)
  au FileType go nmap &lt;Leader&gt;gb &lt;Plug&gt;(go-doc-browser)
  au FileType go nmap &lt;Leader&gt;ds &lt;Plug&gt;(go-def-split)
  au FileType go nmap &lt;Leader&gt;dv &lt;Plug&gt;(go-def-vertical)
  au FileType go nmap &lt;Leader&gt;dt &lt;Plug&gt;(go-def-tab)
  let g:go_auto_type_info = 1
  let g:go_fmt_command = "gofmt"
  let g:go_fmt_experimental = 1
  let g:go_dispatch_enabled = 0 " vim-dispatch needed
  let g:go_metalinter_autosave = 1
  let g:go_metalinter_autosave_enabled = ['vet', 'golint']
  let g:go_metalinter_enabled = ['vet', 'golint', 'errcheck']
  let g:go_term_enabled = 0
  let g:go_term_mode = "vertical"
" let g:go_highlight_functions = 1
  let g:go_highlight_methods = 1
" let g:go_highlight_structs = 1
" let g:go_highlight_interfaces = 1
  let g:go_highlight_operators = 1
  let g:go_highlight_extra_types = 1
  let g:go_highlight_build_constraints = 1
  let g:go_highlight_chan_whitespace_error = 1
endfunction
call VimGoSetup()
</code></p>

<p>You can see the three lines I commented out above.  I still get plenty of syntax
highlighting without it.  So I&rsquo;m good with this for now.</p>

<p>Finally, one could just use more of PageUp/PageDown to move around the file.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Processing Credit Cards With Tokens?]]></title>
    <link href="http://eduncan911.com/software/security/processing-credit-cards-with-tokens.html"/>
    <updated>2014-07-31T14:07:40-04:00</updated>
    <id>http://eduncan911.com/software/security/processing-credit-cards-with-tokens</id>
    <content type="html"><![CDATA[<p><audio preload="none" data-mins="03" data-secs="21" data-title="NPR: Visa Makes Big Move To Boost Consumer Spending Online">
<source src="http://pd.npr.org/anon.npr-mp3/npr/atc/2014/07/20140716_atc_visa_makes_big_move_to_increase_online_spending.mp3">http://pd.npr.org/anon.npr-mp3/npr/atc/2014/07/20140716_atc_visa_makes_big_move_to_increase_online_spending.mp3</a>" >
Audio player not available in your browser. Please try a newer browser.
</audio></p>

<p>Heard this on NPR and decided to investigate further because at first glance it looks like a good idea &ndash; at least from a developer&rsquo;s perspective.</p>

<p>From the PaymentNews website, I found this announcement.</p>

<p><blockquote><p>Tokenization is the process of replacing a traditional card account number with a unique payment token that is restricted in how it can be used with a specific device, merchant, transaction type or channel. When using tokenization, merchants and digital wallet operators do not need to store card account numbers; instead they are able to store payment tokens that can only be used for their designated purpose. The tokenization process happens in the background in a manner that is expected to be invisible to the consumer.</p><footer><strong>EMVCo to Work on Payment Tokenization Standards <a href="http://www.paymentsnews.com/2014/01/emvco-to-work-on-payment-tokenization-standards.html">http://www.paymentsnews.com/2014/01/emvco-to-work-on-payment-tokenization-standards.html</a></strong></footer></blockquote></p>

<p>Visa calls it, <a href="https://checkout.visa.com/index.jsp?country=US">VISA checkout</a> and it is supposed to remove the burden of entering a credit card from your smartpohone.</p>

<p>Looking better.  But wait a minute, how do you secure/access a token?</p>

<p>Turns out they are expecting users to sign in with a &ldquo;<em>simple username and password, easy to remember</em>.&rdquo;  And there inlies my first cringe &ndash; passwords?  Let me explain why that is a roadblock IMO:</p>

<ul>
<li>Either the <a href="http://en.wikipedia.org/wiki/Password_policy">password requirements</a> will be a road block for anyone to easily type or remember.</li>
<li>Or, the password will be a weaker password &ndash; easy for people to remember, and also to reuse for, say, a forum login <a href="http://lifehacker.com/5853483/a-guide-to-sniffing-out-passwords-and-cookies-and-how-to-protect-yourself-against-it">that can easily get sniffed</a>.</li>
</ul>


<p>Sure, you can mitigate the complex passwords with a password manager.  But, not everyone uses those and some would argue <a href="/software/security/password-managers-are-not-immune-to-hacks-themselves.html">a password manager is also a bad idea</a>.</p>

<p>Today if presented with an &ldquo;enter credit card details below&rdquo; with an option to &ldquo;sign in with Visa Checkout instead&rdquo;, I still enter the raw CC details.  Which that in and of itself is the problem VISA is trying to fix by focusing the burden on secure storage of those CC details with VISA themselves, instead of the mom-n-pop cake shop&rsquo;s PHP website that is asking for my CC.</p>

<p>What I would suggest is to take a more two-factor approach to authentication.  Something that involves a simple password, one that is easy to remember; but also, you need to have a second factor of authentication &ndash; like a keyfob or fingerprint reader or possibly even, gasp, something as simple as <a href="http://en.wikipedia.org/wiki/Google_Authenticator">Google&rsquo;s Authenticator</a> that has worked perfectly for me for many websites and devices.</p>

<p>But sadly, we will continue to be forced to obey the <a href="http://www.taipeitimes.com/News/editorials/archives/2010/09/10/2003482490">false sense of security of complex passwords</a>.</p>

<p>Also see: <a href="/software/security/passwords-when-security-gets-in-the-way.html">Passwords &ndash; When Security Gets in the Way</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Password Managers Are Not Immune to Hacks Themselves]]></title>
    <link href="http://eduncan911.com/software/security/password-managers-are-not-immune-to-hacks-themselves.html"/>
    <updated>2014-07-30T16:11:41-04:00</updated>
    <id>http://eduncan911.com/software/security/password-managers-are-not-immune-to-hacks-themselves</id>
    <content type="html"><![CDATA[<p><a href="http://www.darkreading.com/cloud/hacking-password-managers/d/d-id/1297250">Hacking Password Managers</a></p>

<p><img src="/blog/images/hacking-password-managers.jpg" title="Hacking Password Managers" ></p>

<p><blockquote><p>&ldquo;Our attacks are severe: in four out of the five password managers we studied (LastPass, RoboForm, My1login, PasswordBox, and NeedMyPassword), an attacker can learn a user’s credentials for arbitrary websites. We find vulnerabilities in diverse features like one-time passwords, bookmarklets, and shared passwords. The root-causes of the vulnerabilities are also diverse: ranging from logic and authorization mistakes to misunderstandings about the web security model, in addition to the typical vulnerabilities like CSRF and XSS. Our study suggests that it remains to be a challenge for the password managers to be secure.&rdquo;</p></p><p><p>&ldquo;We found critical vulnerabilities in all three bookmarklets we studied,&rdquo; the researchers report. &ldquo;If a user clicks on the bookmarklet on an attacker’s site, the attacker, in all three cases, learns credentials for arbitrary websites.&rdquo;</p></p><p><p>&ldquo;Our work is a wake-up call for developers of web-based password managers. The wide spectrum of discovered vulnerabilities, however, makes a single solution unlikely. Instead, we believe developing a secure web-based password manager entails a systematic, defense-in-depth approach&hellip; Future work includes creating tools to automatically identify such vulnerabilities and developing a principled, secure-by-construction password manager.&rdquo;</p><footer><strong>Hacking Password Managers <a href="http://www.darkreading.com/cloud/hacking-password-managers/d/d-id/1297250">http://www.darkreading.com/cloud/hacking-password-managers/d/d-id/1297250</a></strong></footer></blockquote></p>

<p>I can&rsquo;t believe we are still talking about CSRF attacks.  And for websites claiming to be <em>secured</em> for passwords themselves?  Isn&rsquo;t it a common job interview question by now (or better yet, a coding exercise) for developers in how to prevent CSRF attacks?</p>

<p>Oh yeah, and how most of the common web-based password managers are all hackable.  Sure, they fixed THIS vulnerability.  Then when the next zero-day is found, it will be fixed.  And the next and the next.</p>

<p>I use a password manager.  It is not web based, does not integrate into any browser, and still requires manual intervention to open and view &ndash; with copy-n-paste only possible in some circumstances which makes the annoyance ever more livable after reading this article.</p>

<p>Can&rsquo;t wait until next month (August) for the paper to be released.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Passwords - When Security Gets in the Way]]></title>
    <link href="http://eduncan911.com/software/security/passwords-when-security-gets-in-the-way.html"/>
    <updated>2014-07-24T16:58:17-04:00</updated>
    <id>http://eduncan911.com/software/security/passwords-when-security-gets-in-the-way</id>
    <content type="html"><![CDATA[<p><a href="http://jnd.org/dn.mss/when_security_gets_in_the_way.html">When Security Gets in the Way</a></p>

<p><img src="/blog/images/when-security-gets-in-the-way.jpg" title="When Security Gets in the Way" ></p>

<p><blockquote><p>The numerous incidents of defeating security measures prompts my cynical slogan: The more secure you make something, the less secure it becomes. Why? Because when security gets in the way, sensible, well-meaning, dedicated people develop hacks and workarounds that defeat the security. Hence the prevalence of doors propped open by bricks and wastebaskets, of passwords pasted on the fronts of monitors or hidden under the keyboard or in the drawer, of home keys hidden under the mat or above the doorframe or under fake rocks that can be purchased for this purpose.</p></p><p><p>We are being sent a mixed message: on the one hand, we are continually forced to use arbitrary security procedures. On the other hand, even the professionals ignore many of them. How is the ordinary person to know which ones matter and which don&rsquo;t? The confusion has unexpected negative side-effects. I once discovered a computer system that was missing essential security patches. When I queried the computer&rsquo;s user, I discovered that the continual warning against clicking on links or agreeing to requests from pop-up windows had been too effective. This user was so frightened of unwittingly agreeing to install all those nasty things from &ldquo;out there&rdquo; that all requests were denied, even the ones for essential security patches. On reflection, this is sensible behavior: It is very difficult to distinguish the legitimate from the illegitimate. Even experts slip up, as the confessions reported occasionally in various computer digests I attest.</p><footer><strong>Don Norman <a href="http://jnd.org/dn.mss/when_security_gets_in_the_way.html">http://jnd.org/dn.mss/when_security_gets_in_the_way.html</a></strong></footer></blockquote></p>

<p>I recall many years ago when Microsoft proclaimed the end of password management woes with long and memorial <a href="http://technet.microsoft.com/en-us/library/cc512624.aspx">Pass Phrases</a>.  I personally started to really get annoyed at websites that didn&rsquo;t allow me to enter spaces or the password length was something small like 16 characters.</p>

<p>As a previous IT Administrator, having to reset so many user passwords because they locked themselves out or just plain forgot their had-to-change-ever-60-days password, I saw first hand the annoyances that most had with passwords.</p>

<p>It wasn&rsquo;t until just a few years ago that the buzz around complex passwords started to shift to a &ldquo;false sense of security&rdquo; statue.  Which is very true because I have personally <a href="http://en.wikipedia.org/wiki/Brute-force_attack">brute-force attacked</a> several passwords (in the name of education, of course).</p>

<p>Seeing how fast my X79 6-core desktop with over 5,760 GPU cores could churn through a few billion password combinations to guess a 20 character TruCrypt volume (it took only 4 hours by the way), the era of complex passwords deterring hackers is over &ndash; way way over since this hardware can easily be purchased off the shelf by anyone &ndash; and I still have room for another 6000 GPU cores if I ever upgraded.  That&rsquo;s just insane &ndash; 12,000 GPU cores in a single machine.</p>

<h2>Smart Password Hashing</h2>

<p>Now, some password managers are smart.  It wasn&rsquo;t until I read into KeePass' <a href="http://keepass.info/help/base/security.html#secdictprotect">protection against Dictionary Attacks</a> did I realize a whole &lsquo;nother way of preventing brute-force attacks.  KeePass describes their password hashing like this:</p>

<p><blockquote><p>You can&rsquo;t really prevent these [brute-force dictionary] attacks: nothing prevents an attacker to just try all possible keys and look if the database decrypts. But what we can do (and KeePass does) is to make it harder: by adding a constant work factor to the key initialization, we can make them as hard as we want.</p><footer><strong>KeePass &ndash; Protection against Dictionary Attacks <a href="http://keepass.info/help/base/security.html#secdictprotect">http://keepass.info/help/base/security.html#secdictprotect</a></strong></footer></blockquote></p>

<p>Please go read the rest of that quote for extreme details.  But in short, here is what they do:</p>

<ul>
<li>Take your Master password and hash it.</li>
<li>Hash it another <em>N</em> number of times based on a simple pre-determined algorithm (think: PreviousHash + &ldquo;A Salt&rdquo;, PreviousHash + &ldquo;B Salt&rdquo;, etc).</li>
</ul>


<p>The trick that makes this work is that <em>N</em> should be a number of cycles that it takes your computer to compute in about 1 second.  By default, they set it to 6000 to allow for older mobile phones to be able to open the password database within about a second or two.  But this should be much higher.  Like, on a factor of 100,000 times higher.</p>

<p>For example, that same 6-core X79 CPU and 5,760 GPU core desktop I used to crack that 20-character TruCrypt could generate about 18,000,000 passwords each second.  But, when I opened KeePass and told it to calculate how many hashes it needed to perform to take at least 1 second on this machine, the answer was 23,000,000.</p>

<p>So how does rehashing 23,000,000 times work, you may ask?  Instead of my computer generating 23,000,000 passwords a second in a brute-force attack, it follows a pre-determined algorithm hashing 23,000,000 times to generate only 1 password.</p>

<p>I&rsquo;ll let that sink in for a moment&hellip;</p>

<p>If a hackers machine is busy generating only 1 password per second, the possibility of brute force attacking a database goes from 23,000,000 per second down to just 1 per second.</p>

<p>No hacker in the world is going to continue brute-forcing that database.  Most likely they will just look for the <a href="http://www.reuters.com/article/2014/03/31/us-usa-security-nsa-rsa-idUSBREA2U0TY20140331">NSA backdoors available in everything</a> at that point.</p>

<p>I&rsquo;ll end with a final quote from our buddy Don from earlier.</p>

<p><blockquote><p>Although there is much emphasis on passwords security most break-ins occur through other means. How do thieves break into systems? They usually don&rsquo;t use brute force. They phish, luring unsuspecting but helpful people to tell them their login name and password. Or they install sniffers on keyboards and record everything that was typed. The strength of passwords is irrelevant if the thief has already discovered it.</p><footer><strong>Don Norman <a href="http://jnd.org/dn.mss/when_security_gets_in_the_way.html">http://jnd.org/dn.mss/when_security_gets_in_the_way.html</a></strong></footer></blockquote></p>
]]></content>
  </entry>
  
</feed>
