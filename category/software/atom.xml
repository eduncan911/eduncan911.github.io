<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Software | Eric Duncan]]></title>
  <link href="http://eduncan911.com/category/software/atom.xml" rel="self"/>
  <link href="http://eduncan911.com/"/>
  <updated>2014-05-08T11:34:32-04:00</updated>
  <id>http://eduncan911.com/</id>
  <author>
    <name><![CDATA[Eric Duncan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Responsive Design Begins With the URL]]></title>
    <link href="http://eduncan911.com/software/design/responsive-design-begins-with-the-url.html"/>
    <updated>2014-05-07T11:27:36-04:00</updated>
    <id>http://eduncan911.com/software/design/responsive-design-begins-with-the-url</id>
    <content type="html"><![CDATA[<p><a href="http://www.smashingmagazine.com/2014/05/02/responsive-design-begins-with-the-url/">Responsive Design Begins with the URL</a></p>

<p><blockquote><p><img src="/blog/images/responsive-design-url-schema.jpg" title="&ldquo;Responsive Design URL Schema&rdquo;" ></p></p><p><p>The core principle in creating a potentially enormous website that will last forever is to get the information architecture right in the first place. This involves knowing your data objects and how they fit together. It should also determine the URL structure, which for Programmes is the most important aspect. Take the URL for Top Gear’s home page:</p></p><p><p><a href="http://www.bbc.co.uk/programmes/b006mj59">http://www.bbc.co.uk/programmes/b006mj59</a></p></p><p><p>After the domain name comes the word “programmes,” which is a simple, unchanging English word. It is intended to describe the object, and is not a brand or product name. Plurals are used so that the URL can be hacked backwards to retrieve an index.</p></p><p><p>Next is the programme identifier. Note the lack of hierarchy and the lack of a title. Titles change over time, and many programmes do not have a unique title, which would cause a clash. Hierarchies also change — a one-off pilot could be commissioned for a full series. Understanding your objects allows you to recognize what is permanent. In this case, nothing is particularly guaranteed to be permanent, so a simple ID is used instead. Users aren’t expected to type these URLs, though. They will usually arrive through a search engine or by typing in a friendly redirect that has been read out on air, such as bbc.co.uk/topgear. But the key principle of a permanent URL is that inward links are trusted to be shareable and work forever. Cool URIs don’t change.</p></p><p><p>A clear information architecture defines the URL scheme. A piece of content is given a clear canonical home, where appropriate. Links and aggregations between them then clearly appear.</p></p><p><p></p><footer><strong>David Marland <a href="http://www.smashingmagazine.com/2014/05/02/responsive-design-begins-with-the-url">http://www.smashingmagazine.com/2014/05/02/responsive-design-begins-with-the-url</a> Responsive Design Begins with the URL</strong></footer></blockquote></p>

<p>For a decade I have spent a considerable amount of time getting the URLs <em>right</em> for what the user was looking at.  I must have gone through 20 different iterations over the years trying out all sorts of designs, deep linking, &ldquo;walk the url backwards&rdquo; and so on.</p>

<p>You can see on my static site blog here that I paid close attention as well, trying out yet another theme.  I am on my 4th iteration of a url schema for my blog and it has become a PITA when having to keep redirects working of old urls, especially on <a href="https://github.com/eduncan911/eduncan911.github.io/tree/master/blog">this static site with no URL rewrite module</a>.</p>

<p>I almost went the <em>post_id</em> route here on this iteration; but, Jekyll (and therefore Octopress) makes the title url-safe already so I kept it.  Besides that, I agree that urls should play a role in your web architecture.</p>

<p>As long as we are talking about it, ASP.NET MVC&rsquo;s default <code>/Controller/Action/Id</code> has always pissed me off since I first started using it back in 2007.  Coming from a pure-RESTful background, the pure REST urls are more similar to <code>/Controller/Id/Action</code> so you end up with urls like this:</p>

<p><code>
/product/2832/
/product/2832/edit
/product/2832/clips
/product/2832/videos
</code></p>

<p>And so on.  Which, actually, falls inline with what the BBC article above was saying.</p>

<p><em>HatTip ForgetFoo</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Avocode]]></title>
    <link href="http://eduncan911.com/software/avocode.html"/>
    <updated>2014-05-04T19:24:04-04:00</updated>
    <id>http://eduncan911.com/software/avocode</id>
    <content type="html"><![CDATA[<p><a href="http://avocode.com/">The bridge between designers and developers</a></p>

<p><blockquote><p></p></p><p><p><div class="embed-video-container"><iframe src="http://player.vimeo.com/video/93386152 "></iframe></div></p></p><p><p>ALWAYS BE IN SYNC<br/>Share with a link and instantly get updates from your designer.<br/>No more e-mail attachments or huge PSD uploads.</p></p><p><p>WEB &amp; NATIVE APP<br/>Preview and inspect PSDs on the web or use the native app<br/>on any platform &ndash; Mac, Windows or even Linux.</p></p><p><p>EVERYTHING FROM A PSD<br/>Choose anything from a PSD and get exactly what<br/>you need – CSS, SVG, images, fonts or colors…</p></p><p><p></p></blockquote></p>

<p>You know, I am starting to get that &ldquo;designer&rdquo; itch again.  I am not a designer; but, I can pull
something outta my ass every once in a while.  Going to try to get a private beta to see if
I can use this for some projects as well.</p>

<p><em>HatTip ForgetFoo</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Static Blog Boom]]></title>
    <link href="http://eduncan911.com/software/the-static-blog-boom.html"/>
    <updated>2014-05-01T13:58:40-04:00</updated>
    <id>http://eduncan911.com/software/the-static-blog-boom</id>
    <content type="html"><![CDATA[<p>There is a new movement taking place in web development over the last few years.
It is called <code>static sites</code>. Just as it sounds, it is simply a collection of <code>.html</code>, <code>.css</code>, <code>.js</code> and images that serves up a complete site. What you may not know is that there are literately 100s of frameworks out there that generate these static sites for you from a single common theme/template.</p>

<h2>Static Site Generators</h2>

<p>I stumbled upon a collection of these frameworks here:</p>

<p><a href="http://staticsitegenerators.net/">http://staticsitegenerators.net/</a></p>

<p>This is pure opinion, but it would seem that most of these frameworks came
out of the Linux/OSX world from developers that needed to generate a static site for this or that.  Those that did it often, needed a way to regenerate a whole static site by just changing, say, the header area.</p>

<p>I know that after my recent conversion to <a href="http://octopress.org">Octopress</a> (aka Jekyll) I have been brainstorming about my own static site generator.  As you can see in the link above, I am not the only one that had a similar thought.</p>

<h2>Advantages to Static Sites</h2>

<p>If you sit back and think about it, there are a number of advantages for running a static site.</p>

<h3>Hosting costs</h3>

<p>Can you really get any cheaper than free?  GitHub pages can host your static site for free.  If you really want to pay for something, then upload your static site files to Amazon S3 file storage and serve your site from there &ndash; for about $0.25/mo for 1000 uniques.</p>

<h3>Security</h3>

<p>You never have to worry about someone hacking your site.  No SQL injection, XSS, CSRF attacks.</p>

<p>Even if someone was to gain access to your hosting account, there is no database or code to hide backdoors in.</p>

<h3>Defacing</h3>

<p>If someone gains access to where you are storing the files and defaces the site, just redeploy &ndash; which overwrites everything.</p>

<h3>Simplicity (aka Serenity)</h3>

<p>It is just a bunch of html, images, css and js files.  You really can&rsquo;t get any simpler than that.</p>

<h2>How a static site becomes dynamic</h2>

<p>The real power behind these static sites is the interactions that the end user have on your site using 3rd party remote widgets.  It makes your site seem fairly dynamic by giving recent information. Just to give you an idea, here are a few widgets built into most of these frameworks:</p>

<ul>
<li>Flickr photo albums, single photos</li>
<li>Disqus commenting system</li>
<li>Google Forms/Surveys (aka Contact Us, product support, etc)</li>
<li>Stackexchange Profile</li>
<li>GitHub Profile</li>
<li>GitHub Repo browser</li>
<li>Twitter feed, single quotes</li>
<li>Sitemap generators</li>
</ul>


<p>&hellip;and a lot more.  By using these widgets, and carefully skinned to look like your site, it creates a dynamic site of sorts that continually updates even it really is a static site.</p>

<p>I use Google Forms here on my site as an example for my <a href="/contact">Contact page</a>.  It looks and feels like I actually did something on the backend to send me an email &ndash; I didn&rsquo;t.</p>

<h2>Customizing the generated output</h2>

<p>Almost all of these frameworks support plugins and extensions allowing for customizing the generated site to your preferences.  Basically these plugins work like this.</p>

<ul>
<li>Parse article/post content, usually on some plain-text form like Markdown</li>
<li>Process categories and tags</li>
<li>Redirects by creating <code>/old-url/index.html</code> kind of pages</li>
<li>Code highlighting</li>
<li>Pagination</li>
</ul>


<p>And so on.  Perhaps an indicator of the quality of the framework is the article/post/page parser with its extensions built into it, and how extensible it is.  Take Octopress for example, it has butt load:</p>

<ul>
<li>blockquote</li>
<li>code</li>
<li>date</li>
<li>GitHub gist</li>
<li>img</li>
<li>pullquote</li>
<li>video</li>
</ul>


<p>Creating your own tag is fairly straight forward using a well documented Liquid Template parser for ruby.</p>

<h2>Speeding up writing is key (for me at least)</h2>

<p>I am now free to write my thoughts in any place I can write notepad.  I insert things like <code>{% blockquote %}</code> and write a small blurb and I&rsquo;m done.  I&rsquo;ve been wanting to switch to Markdown since I started using it with Unfuddle many many years ago, and now I can.</p>

<p>If this post made you think about making more sites static, drop me a line in the comments below.</p>

<p>~E</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Please Put Your Blog Under Source Control]]></title>
    <link href="http://eduncan911.com/software/please-put-your-blog-under-source-control.html"/>
    <updated>2014-04-07T10:37:08-04:00</updated>
    <id>http://eduncan911.com/software/please-put-your-blog-under-source-control</id>
    <content type="html"><![CDATA[<p>There are many benefits to both your readers and yourself if you were to put your
blog under source revisions.  I would go as far to say that you own it to the community
to publish all revisions of your blog that was ever public for pure archiving reasons.</p>

<!-- more -->


<h2>Revision those files you linked to</h2>

<p>Recently I setup <a href="/software/my-hackers-blog.html">my hacker&rsquo;s blog</a>
and I had a need to import my old blog posts from CommunityServer.  The steps were a bit
hackery itself as I had to get data out of CS and into a format that one of the common
importers of Jekyll/Octopress could read from.  I chose BlogML to export as that seemed
to have the oldest support (my CS blog was 9 years old).</p>

<h2>Finding that old file that no one cares about any longer</h2>

<p>After spending a few days off and on tweaking the exported BlogML data, I basically found only
a single BlogML importer for Jekyll.  This is why I chose this route to begin with.  So, when
it came time to perform the import guess what?  The blogml.rb ruby script links were all broken!</p>

<p>Then I had a thought: if the author of the script was running Jekyll/Octopress, especially on
GitHub pages, then perhaps there is a revision history.</p>

<p>I had to dig through about 2 years of commits; but, I found it!</p>

<p><a href="https://github.com/philippkueng/philippkueng.github.com/blob/30ef1570f06d33938b18d5eee7767d6641b9a779/source/_import/blogml.rb">Commit 30ef1570f0 for blogml.rb from author</a></p>

<p>You can even backup a folder and see his entire snapshot of his blog during the import process.</p>

<p>Thank you Philipp Küng for revisioning your blog.</p>

<h2>Changing blogging platforms</h2>

<p>What if you are switch blogging software every 5 years?  Keep old snapshots and revisions of your old site
in tags and refer to them in your change revisions.  Even if you don&rsquo;t keep the same technology,
having an old copy around for public reference can be useful to the community.</p>

<h2>Domain expiration, hosting company goes under, etc</h2>

<p>So your domain expires or got snatched up by a squatter?  Or your hosting company pulls the plug?
At least having a revision available will allow you the flexibility, even if you don&rsquo;t continue
a blog any longer.</p>

<h2>Updates, changes and redactions</h2>

<p>Opinions online can be heated and made in jest.  You may have published something that you wish you
didn&rsquo;t.  Or after some nice comments are posted, you update the post.  Maybe a DMCA takedown request
forced you to remove a piece of content.  Wouldn&rsquo;t it be nice to know and show the revision history of your post?</p>

<p>I know that me for one is going to stop with the dozen tiny edits for spelling and grammar because
of this.  Who knows, it may cause me to actually <em>think</em> before publishing.</p>

<p>And FYI, you can see each revision of each post and page I make to my site here.</p>

<h2>Backups</h2>

<p>Similar to the above, having a full backup you can take with you can be advantageous.</p>

<p>Personally, I not only publish my source code here at GitHub; but, I also have an additional
remote added for BitBucket and always do the following:</p>

<p>``` bash</p>

<blockquote><p>git add .
git commit -m &ldquo;fixed spelling and corrected a quote&rdquo;
git push backup source
git push origin source
```</p></blockquote>

<p>Now, you can do this for any source code sure.  It&rsquo;s these next steps that make it viable.</p>

<p>``` bash</p>

<blockquote><p>rake deploy</p>

<pre><code>^- this publishes the live site to GitHub pages
</code></pre>

<p>cd ./_deploy
git push backup master
```</p></blockquote>

<p>Yep, I also deploy a 2nd copy to my BitBucket account.  Even though it will never be used as a real
site, it&rsquo;s a full backup of the live site in the master branch.</p>

<p>The Optopress command <code>rake deploy</code> also pushed it up to GitHub pages on master &ndash; that&rsquo;s how it
&ldquo;publishes.&rdquo;  So all I have to do is make a quick backup.  What&rsquo;s even nice is the script does
a pull request as well, to keep the _deploy folder in sync so when I do perform a backup, it&rsquo;s all there.
I am new to git branch tracking; so, I may have to tweak that last command by forcing <code>-f</code> up the
push to backup if it gets out of sync or something.</p>

<p>Finally, having multiple copies of your repo online and publicly accessible can help with&hellip;</p>

<h2>Government seizers</h2>

<p>All too often, governments are taking domains and peoples' hosting accounts in the name of DMCA and
copyright infringements.  Oh, and free speech as well.</p>

<p>Why not publish your blog open source?</p>

<p>The last step to further solidify your published site and source would be automate a bittorrent release
for every deployment.  Doesn&rsquo;t seem to far out of reach with these snapshots readily available.</p>

<h2>Death</h2>

<p>What if you were to pass away?  Would your annual payment to your domains continue for decades? What
about the fee you pay your hosting company?  Same as the previous reason, publishing it may very well
keep it going for a long time even if the domain is gone, people can still get to the source.</p>

<p>Especially at a place like GitHub pages.</p>

<h2>Why not?</h2>

<p>I hope I sparked some food for thought and I would like your opinions on the matter.</p>

<p>I cannot come up with solid reasons for not to publish your blog open source.  I know at first I
wrestled with the idea that:</p>

<p><blockquote><p>Wait, my database connection strings would be publicly visible.  I can&rsquo;t do that.</p></blockquote></p>

<p>Then it hit me that Octopress/Jekyll is completely static &ndash; there are no database connection strings.
Q
<blockquote><p>My secret keys for my 3rd party integrations may be exposed.</p></blockquote></p>

<p>Actually not.  Twitter, Disqus, LinkedIn and so on all use public kesy/ids to identify you with their
widgets.  Even Flickr allows for a vast array of public apis.</p>

<p>You would only need private keys on your site if you were programatically pushing or changing content
elsewhere in a write-permission need.  But again, this was planned as a static site &ndash; no problem here.</p>

<p><blockquote><p>I have private downloads I don&rsquo;t want others to see.</p></blockquote></p>

<p>Ok, this one did get me.  I do have private downloads of password-protected files on my old site.</p>

<p>I have to think back to the longevity of my blog &ndash; do I want the downloads archived forever?  Short
answer, no.</p>

<p>~E</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress and Posh-Git - Oh My]]></title>
    <link href="http://eduncan911.com/software/octopress-powershell-and-posh-git-oh-my.html"/>
    <updated>2014-04-03T16:11:01-04:00</updated>
    <id>http://eduncan911.com/software/octopress-powershell-and-posh-git-oh-my</id>
    <content type="html"><![CDATA[<p>As announced previously, I&rsquo;ve recently <a href="/software/my-hackers-blog.html">converted my blog over to Octopress</a>.
This was not without a few stumbling blocks on Windows using Posh-Git.  I&rsquo;ve also recently started to suspect some issues
with <a href="https://github.com/dahlbyk/posh-git">Posh-Git</a> now that I am using it on a daily basis.</p>

<p>In this post, I am documenting the procedure for future installs on Windows; and, maybe I can help someone else who runs across the
same issues.</p>

<!-- more -->


<h2>Ruby on Windows? No, Yari on Windows</h2>

<p>This is my first exposure to Ruby.  I know, I&rsquo;ve been closed off to anything non-.NET since, well, .NET in 2002.  With that the first
steps to getting ruby installed.  A few quick searches yielded some issues with Windows and Ruby and Octopress, until I ran across
<a href="http://blog.zerosharp.com/setting-up-octopress-on-windows-again/">Robert Anderson&rsquo;s Octopress install</a>.</p>

<p>They key point to this type of installing is this golden snippet:</p>

<p><blockquote><p>Use yari instead of RVM/rbenv</p></p><p><p>Scott Muc has written yari which lets you switch between Windows Ruby versions.</p><footer><strong>Robert Anderson <a href="http://blog.zerosharp.com/setting-up-octopress-on-windows-again/">http://blog.zerosharp.com/setting-up-octopress-on-windows-again/</a> Setting Up Octopress on Windows Again</strong></footer></blockquote></p>

<!-- TODO: Unfortunately this didn't work for me out right.  I had some issues with the `gem install bundler` command that generated a lot of missing
dependencies. -->


<p>Once all dependencies are fixed up, it&rsquo;s onto following the setup guide over at Octopress:</p>

<p><a href="http://octopress.org/docs/setup/">http://octopress.org/docs/setup/</a></p>

<h2><code>&gt; rake setup_github_pages</code></h2>

<p>Now, I am going to use GitHub Pages for my static blog hosting.  Those are the instructions I am going to focus on here and below.</p>

<p>The next step is to call the task to setup your repo for GitHub deployments.  Just take a quick gander a what it does,
as listed on the Octopress install guide:</p>

<ol>
<li>Ask for and store your Github Pages repository url.</li>
<li>Rename the remote pointing to imathis/octopress from &lsquo;origin&rsquo; to &lsquo;octopress&rsquo;</li>
<li>Add your Github Pages repository as the default origin remote.</li>
<li>Switch the active branch from master to source.</li>
<li>Configure your blog&rsquo;s url according to your repository.</li>
<li>Setup a master branch in the _deploy directory for deployment.</li>
</ol>


<p>If that sounds like a lot, wait until you see what actually does happen below.  So, we&rsquo;ll run it and look at the output:</p>

<p>``` plain
C:\gd\code\eduncan911 [master +2 ~1 -0 !]> rake setup_github_pages</p>

<h2>Set the codepage to 65001 for Windows machines</h2>

<p>Enter the read/write url for your repository
(For example, &lsquo;git@github.com:your_username/your_username.github.io.git)</p>

<pre><code>       or 'https://github.com/your_username/your_username.github.io')
</code></pre>

<p>Repository url: git@github.com:eduncan911/eduncan911.github.io.git
fatal: remote origin already exists.
Added remote git@github.com:eduncan911/eduncan911.github.io.git as origin
Set origin as default remote
Master branch renamed to &lsquo;source&rsquo; for committing your blog source files
rm -rf <em>deploy
mkdir </em>deploy
cd <em>deploy
Initialized empty Git repository in C:/gd/code/eduncan911/</em>deploy/.git/
&lsquo;My Octopress Page is coming soon
'hellip&rsquo; is not recognized as an internal or external command, operable program or batch file.
[master (root-commit) f1e0e3f] Octopress init
 1 file changed, 0 insertions(+), 0 deletions(&ndash;)
 create mode 100644 index.html
fatal: remote origin already exists.
cd &ndash;</p>

<hr />

<h2>Now you can deploy to git@github.com:eduncan911/eduncan911.github.io.git with <code>rake deploy</code></h2>

<p>C:\gd\code\eduncan911 [source +2 ~3 -0 !]>
```</p>

<p>Btw, kudos to the developers of Octopress to put this much output in the build processes &ndash; makes
things much easier to debug than the vast majority of scripts you run.</p>

<p>But doh!  We have our first stumbling blocks.  We have a number of errors to work out here, three exactly.</p>

<p>Fortunately, <code>line 7</code> is an extremely common problem when working git.  Unfortunately though,
the common fixes doesn&rsquo;t seem to work with any Posh-Git install I&rsquo;ve used to date.</p>

<p>Before we get to that though, let&rsquo;s take a look at the ruby task to see exactly what is going on
before we jump to any conclusions.</p>

<p>``` ruby RakeFile
desc &ldquo;Set up _deploy folder and deploy branch for Github Pages deployment&rdquo;
task :setup_github_pages, :repo do |t, args|
  if args.repo</p>

<pre><code>repo_url = args.repo
</code></pre>

<p>  else</p>

<pre><code>puts "Enter the read/write url for your repository"
puts "(For example, 'git@github.com:your_username/your_username.github.io.git)"
puts "           or 'https://github.com/your_username/your_username.github.io')"
repo_url = get_stdin("Repository url: ")
</code></pre>

<p>  end
  protocol = (repo_url.match(/(^git)@/).nil?) ? &lsquo;https&rsquo; : &lsquo;git&rsquo;
  if protocol == &lsquo;git&rsquo;</p>

<pre><code>user = repo_url.match(/:([^\/]+)/)[1]
</code></pre>

<p>  else</p>

<pre><code>user = repo_url.match(/github\.com\/([^\/]+)/)[1]
</code></pre>

<p>  end
  branch = (repo_url.match(/\/[\w-]+.github.(?:io|com)/).nil?) ? &lsquo;gh-pages&rsquo; : &lsquo;master&rsquo;
  project = (branch == &lsquo;gh-pages&rsquo;) ? repo_url.match(/\/([^.]+)/)[1] : &lsquo;&rsquo;
  unless (<code>git remote -v</code> =~ /origin.+?octopress(?:.git)?/).nil?</p>

<pre><code># If octopress is still the origin remote (from cloning) rename it to octopress
system "git remote rename origin octopress"
if branch == 'master'
  # If this is a user/organization pages repository, add the correct origin remote
  # and checkout the source branch for committing changes to the blog source.
  system "git remote add origin #{repo_url}"
  puts "Added remote #{repo_url} as origin"
  system "git config branch.master.remote origin"
  puts "Set origin as default remote"
  system "git branch -m master source"
  puts "Master branch renamed to 'source' for committing your blog source files"
else
  unless !public_dir.match("#{project}").nil?
    system "rake set_root_dir[#{project}]"
  end
end
</code></pre>

<p>  end
  jekyll_config = IO.read(&lsquo;<em>config.yml&rsquo;)
  jekyll_config.sub!(/^url:.*$/, &ldquo;url: #{blog_url(user, project)}&rdquo;)
  File.open(&lsquo;</em>config.yml&rsquo;, &lsquo;w&rsquo;) do |f|</p>

<pre><code>f.write jekyll_config
</code></pre>

<p>  end
  rm_rf deploy_dir
  mkdir deploy_dir
  cd &ldquo;#{deploy_dir}&rdquo; do</p>

<pre><code>system "git init"
system "echo 'My Octopress Page is coming soon &amp;hellip;' &gt; index.html"
system "git add ."
system "git commit -m \"Octopress init\""
system "git branch -m gh-pages" unless branch == 'master'
system "git remote add origin #{repo_url}"
rakefile = IO.read(__FILE__)
rakefile.sub!(/deploy_branch(\s*)=(\s*)(["'])[\w-]*["']/, "deploy_branch\\1=\\2\\3#{branch}\\3")
rakefile.sub!(/deploy_default(\s*)=(\s*)(["'])[\w-]*["']/, "deploy_default\\1=\\2\\3push\\3")
File.open(__FILE__, 'w') do |f|
  f.write rakefile
end
</code></pre>

<p>  end
  puts &ldquo;\n&mdash;&ndash;\n## Now you can deploy to #{repo_url} with <code>rake deploy</code> ##&rdquo;
end
```</p>

<p>Let&rsquo;s step through what this task does to our repo:</p>

<!-- start:20 -->


<p>``` ruby RakeFile</p>

<pre><code># If octopress is still the origin remote (from cloning) rename it to octopress
system "git remote rename origin octopress"
</code></pre>

<p>```</p>

<p>Ok, no problem.  We are renaming origin.  But what you don&rsquo;t know is with Posh-Git, when
you rename origin, it seems creates an empty origin!  So, when the next system command executes:</p>

<!-- start:22 -->


<p>``` ruby RakeFile</p>

<pre><code>if branch == 'master'
  # If this is a user/organization pages repository, add the correct origin remote
  # and checkout the source branch for committing changes to the blog source.
  system "git remote add origin #{repo_url}"
</code></pre>

<p>```</p>

<p>We get our first error, <code>fatal: remote origin already exists.</code></p>

<p>Ok, back on task of what the <code>RakeFile</code> is doing to move forward.</p>

<!--  start:26 mark:27,29 -->


<p>``` ruby RakeFile</p>

<pre><code>  puts "Added remote #{repo_url} as origin"
  system "git config branch.master.remote origin"
  puts "Set origin as default remote"
  system "git branch -m master source"
  puts "Master branch renamed to 'source' for committing your blog source files"
else
  unless !public_dir.match("#{project}").nil?
    system "rake set_root_dir[#{project}]"
  end
end
</code></pre>

<p>  end
```</p>

<p>Interesting.  I haven&rsquo;t seen this in my git-ninja code before.  A quick Google and we come up
with this SO answer on how to setup master to track a remote branch:</p>

<p><blockquote><p>You can do the following (assuming you are checked out on master and want to push to a remote branch master):</p></p><p><p>Set up the &lsquo;remote&rsquo; if you don&rsquo;t have it already</p></p><p><h1>git remote add origin ssh://&hellip;</h1></p><p><p>Now configure master to know to track:</p></p><p><h1>git config branch.master.remote origin</h1></p><p><h1>git config branch.master.merge refs/heads/master</h1></p><p><p>And push:</p></p><p><h1>git push origin master</h1></p><p><p></p><footer><strong>Paul Hedderly <a href="http://stackoverflow.com/a/625460/56693">http://stackoverflow.com/a/625460/56693</a></strong></footer></blockquote></p>

<p>So now we have master tracking a remote branch and on <code>line 29</code>, we&rsquo;ve renamed master to a new branch
called <code>source</code> (which also switches us to <code>source</code> for future commands).</p>

<p>Continuing&hellip;</p>

<!--  start:37 mark:45-48 -->


<p>``` ruby RakeFile
  jekyll_config = IO.read(&lsquo;<em>config.yml&rsquo;)
  jekyll_config.sub!(/^url:.*$/, &ldquo;url: #{blog_url(user, project)}&rdquo;)
  File.open(&lsquo;</em>config.yml&rsquo;, &lsquo;w&rsquo;) do |f|</p>

<pre><code>f.write jekyll_config
</code></pre>

<p>  end
  rm_rf deploy_dir
  mkdir deploy_dir
  cd &ldquo;#{deploy_dir}&rdquo; do</p>

<pre><code>system "git init"
system "echo 'My Octopress Page is coming soon &amp;hellip;' &gt; index.html"
system "git add ."
system "git commit -m \"Octopress init\""
</code></pre>

<p>```</p>

<p>Ah, we are create a new directory (<code>_deploy</code> by default Octopress config) and by calling
<code>git init</code> we create a new bank repo!  This was not clear to me as to why at first, until I got things
working.  You&rsquo;ll see why in a bit.</p>

<p>And look here, on <code>line 46</code>, we have our 2nd error in the output.  It would seem this
is a parsing typo on Windows machines.  So, we never get this index.html file!  No biggie,
we&rsquo;ll be replacing that very shortly anyways.</p>

<p>Let&rsquo;s move forward.</p>

<!-- start:49 -->


<p>``` ruby RakeFile</p>

<pre><code>system "git branch -m gh-pages" unless branch == 'master'
</code></pre>

<p>```</p>

<p>This is my first Ruby playground, so I am not exactly sure what this line does.  I would say we create
a branch called gh-pages, but that is for GitHub Projects (for corporate accounts), not our
GitHub Pages that we using here.</p>

<p>I suspect the <code>unless branch == 'master'</code> is what prevents this line from running on my installation.</p>

<!-- start:50 mark:50 -->


<p>``` ruby RakeFile</p>

<pre><code>system "git remote add origin #{repo_url}"
rakefile = IO.read(__FILE__)
rakefile.sub!(/deploy_branch(\s*)=(\s*)(["'])[\w-]*["']/, "deploy_branch\\1=\\2\\3#{branch}\\3")
rakefile.sub!(/deploy_default(\s*)=(\s*)(["'])[\w-]*["']/, "deploy_default\\1=\\2\\3push\\3")
File.open(__FILE__, 'w') do |f|
  f.write rakefile
end
</code></pre>

<p>  end
  puts &ldquo;\n&mdash;&ndash;\n## Now you can deploy to #{repo_url} with <code>rake deploy</code> ##&rdquo;
end
```</p>

<p>Finally we are at the end.  Let&rsquo;s see, back on <code>line 48</code> we are sitting in a new directory
called <code>_deploy</code> with a new clean <code>git init</code>.  So, on <code>line 50</code> we add a remote for origin&hellip;</p>

<p>And get our 3rd and final error, that we have already seen before.</p>

<h3>fatal: remote origin already exists</h3>

<p>As I mentioned earlier, this is most likely because Posh-Git already creates an origin and never
leaves an empty remote.</p>

<p>I&rsquo;ve seen this <a href="https://www.google.com/search?q=fatal%3A+remote+origin+already+exists&amp;oq=fatal%3A+remote+origin+already+exists&amp;aqs=chrome..69i57j69i58.840j0j7&amp;sourceid=chrome&amp;espv=210&amp;es_sm=122&amp;ie=UTF-8">fatal: remote origin already exists</a>
error all too often and it usually means you already have an origin and cannot add another one.  Usually <code>git</code> on Linux allows you to fix with a set of simple and meaningful commands:</p>

<p>``` bash</p>

<h1>pseudo code, not actually used during this install guide</h1>

<p>$ git remote add temp user@my-url.com/repo.git
$ git remote rm origin
$ git remote add origin user@my-url.com/repo.git
$ git remote rm temp
```</p>

<p>But this has never worked for me using Posh-Git.  When trying to remove origin with Posh-Git, you get a new and blocking
error:</p>

<p><code>plain
C:\gd\code\eduncan911 [source +2 ~3 -0 !]&gt; git remote rm origin
error: Could not remove config section 'remote.origin'
</code></p>

<p>Searching online basically leads you to a dead end in that this normally works using other versions of git.  I did stumble upon
a related SO question about remotes using <code>set-url</code>, which <a href="http://stackoverflow.com/a/22826225/56693">lead me to come up with this solution</a>:</p>

<p><code>plain
C:\gd\code\eduncan911 [source +2 ~3 -0 !]&gt; git remote -v
octopress       git://github.com/imathis/octopress.git (fetch)
octopress       git://github.com/imathis/octopress.git (push)
origin
</code></p>

<p>As you can see, the <code>rake setup_github_pages</code> has renamed our origin to octopress.  But Posh-Git seemed to have created
another empty origin and it won&rsquo;t the script add one.  Let&rsquo;s fix that:</p>

<p><code>plain
C:\gd\code\eduncan911 [source +2 ~3 -0 !]&gt; git remote set-url --add origin git@github.com:eduncan911/eduncan911.github.io.git
C:\gd\code\eduncan911 [source +2 ~3 -0 !]&gt; git remote -v
octopress       git://github.com/imathis/octopress.git (fetch)
octopress       git://github.com/imathis/octopress.git (push)
origin  git@github.com:eduncan911/eduncan911.github.io.git (fetch)
origin  git@github.com:eduncan911/eduncan911.github.io.git (push)
</code></p>

<p>There we go.  Let&rsquo;s <code>rake</code> that <code>setup_github_pages</code> script again, shall we?</p>

<!-- mark:17 -->


<p>``` plain
C:\gd\code\eduncan911 [source +2 ~3 -0 !]> rake setup_github_pages</p>

<h2>Set the codepage to 65001 for Windows machines</h2>

<p>Enter the read/write url for your repository
(For example, &lsquo;git@github.com:your_username/your_username.github.io.git)</p>

<pre><code>       or 'https://github.com/your_username/your_username.github.io')
</code></pre>

<p>Repository url: git@github.com:eduncan911/eduncan911.github.io.git
rm -rf <em>deploy
mkdir </em>deploy
cd <em>deploy
Initialized empty Git repository in C:/gd/code/eduncan911/</em>deploy/.git/
&lsquo;My Octopress Page is coming soon
'hellip&rsquo; is not recognized as an internal or external command,
operable program or batch file.
[master (root-commit) 27d2dd5] Octopress init
 1 file changed, 0 insertions(+), 0 deletions(&ndash;)
 create mode 100644 index.html
fatal: remote origin already exists.
cd &ndash;</p>

<hr />

<h2>Now you can deploy to git@github.com:eduncan911/eduncan911.github.io.git with <code>rake deploy</code></h2>

<p>```</p>

<p>Well crap. We still get that <code>fatal: remote origin already exists</code> on <code>line 17</code> error after all we did!</p>

<p>Ah, but remember what I said earlier about a directory called <code>_deploy</code>?  They are making a new repo
and setting up the <code>origin</code> manually.</p>

<p>So, we have to set that <code>origin</code> ourselves again.</p>

<p><code>plain
C:\gd\code\eduncan911 [source +2 ~3 -0 !]&gt; cd .\_deploy
C:\gd\code\eduncan911\_deploy [master]&gt; git remote -v
origin
</code></p>

<p>This is just checking to see what was there and as we suspected the <code>git remote add origin</code> command in the task did not work.</p>

<p>You may also notice that when you change directories to the <code>_deploy</code> new repo, we are on <code>master</code> now of a different repo.
We were previously on `source' branch of the root repo from the previous scripts.</p>

<p>So let&rsquo;s fix that up.</p>

<p><code>plain
C:\gd\code\eduncan911\_deploy [master]&gt; git remote set-url --add origin git@github.com:eduncan911/eduncan911.github.io.git
C:\gd\code\eduncan911\_deploy [master]&gt; git remote -v
origin  git@github.com:eduncan911/eduncan911.github.io.git (fetch)
origin  git@github.com:eduncan911/eduncan911.github.io.git (push)
C:\gd\code\eduncan911\_deploy [master]&gt; cd ..
C:\gd\code\eduncan911 [source +2 ~3 -0 !]&gt;
</code></p>

<p>There we go.  All fixed up and ready to continue.  Make sure to change directories <code>cd ..</code> to backup to where you were
before continuing.</p>

<p>At this point, it is not necessary to run the <code>rake setup_github_pages</code> again because the script continues even with
errors, as we&rsquo;ve seen above.  The last part of the script seems to modify the <code>RakeFile</code>.  We&rsquo;ll leave that for another
topic as we want to keep hacking on our new blog to get it up.</p>

<p><p class='info ' data-title=''>To the keen observer, you may notice that we have two branches of the same repo:</p></p><p><p>git@github.com:eduncan911/eduncan911.github.io.git</p></p><p><h1>master</h1></p><p><h1>source</h1></p><p><p>The first part of Octopress' instructions for github actually branches what you cloned from Octopress' github<br/>into a source branch.  Ok, check.</p></p><p><p>But recall that we created a sub-directory called _deploy and we git init a new clean repo there.  It was<br/>already set to master, and finally we made its origin the same as our original source.</p></p><p><p>What this means is now you will have two branches with completely different code.  Your source branch is what<br/>you will work from, commit to and push up.  While the Octopress ruby framework will handle the generation of the<br/>static site and deployments to the master branch.</p></p><p><p>The last piece to remember is that GitHub Pages will only use the master branch to serve your static site.</p></p><p><p>Sweet!  Our website (aka master branch) will be nice and clean based on this _deploy directory, whereas<br/>our source branch will be the work committed.</p></p>

<h2><code>rake generate</code></h2>

<p>This runs without issue.</p>

<h2><code>rake deploy</code></h2>

<p>Aw shit, it would seem we still have some issues because this task generates errors:</p>

<!-- mark:6-7,24-28 -->


<p>``` plain
C:\gd\code\eduncan911 [source +2 ~3 -0 !]> rake deploy</p>

<h2>Set the codepage to 65001 for Windows machines</h2>

<h2>Deploying branch to Github Pages</h2>

<h2>Pulling any updates from Github Pages</h2>

<p>cd <em>deploy
fatal: No remote repository specified.  Please, specify either a URL or a
remote name from which new revisions should be fetched.
cd &ndash;
rm -rf </em>deploy/index.html</p>

<h2>Copying public to _deploy</h2>

<p>cp -r public/. <em>deploy
cd </em>deploy</p>

<h2>Committing: Site updated at 2014-04-03 22:58:56 UTC</h2>

<p>[master 5257cf9] Site updated at 2014-04-03 22:58:56 UTC
 61 files changed, 1118 insertions(+)
 create mode 100644 assets/jwplayer/glow/controlbar/background.png
 &hellip;(snip)&hellip;
 create mode 100644 sitemap.xml
 create mode 100644 stylesheets/screen.css</p>

<h2>Pushing generated _deploy website</h2>

<p>fatal: &lsquo;origin&rsquo; does not appear to be a git repository
fatal: Could not read from remote repository.</p>

<p>Please make sure you have the correct access rights
and the repository exists.</p>

<h2>Github Pages deploy complete</h2>

<p>cd &ndash;
C:\gd\code\eduncan911 [source +2 ~3 -0 !]>
```</p>

<p>We got two errors to sort out.  Let&rsquo;s take a look at the first one.</p>

<h3>fatal: No remote repository specified.  Please, specify either a URL or a remote name from which new revisions should be fetched.</h3>

<p>Humm, this sounds like a <code>git pull</code> was issued.  Let&rsquo;s take a look at the ruby commands for this.  Again, thanks to
the great output from the developers, a quick search in the <code>RakeFile</code> finds this code.</p>

<!--  mark:5-6,18 -->


<p>``` ruby RakeFile
desc &ldquo;deploy public directory to github pages&rdquo;
multitask :push do
  puts &ldquo;## Deploying branch to Github Pages &rdquo;
  puts &ldquo;## Pulling any updates from Github Pages &rdquo;
  cd &ldquo;#{deploy_dir}&rdquo; do</p>

<pre><code>system "git pull"
</code></pre>

<p>  end
  (Dir[&ldquo;#{deploy_dir}/*&rdquo;]).each { |f| rm_rf(f) }
  Rake::Task[:copydot].invoke(public_dir, deploy_dir)
  puts &ldquo;\n## Copying #{public_dir} to #{deploy_dir}&rdquo;
  cp_r &ldquo;#{public_dir}/.&rdquo;, deploy_dir
  cd &ldquo;#{deploy_dir}&rdquo; do</p>

<pre><code>system "git add -A"
puts "\n## Committing: Site updated at #{Time.now.utc}"
message = "Site updated at #{Time.now.utc}"
system "git commit -m \"#{message}\""
puts "\n## Pushing generated #{deploy_dir} website"
system "git push origin #{deploy_branch}"
puts "\n## Github Pages deploy complete"
</code></pre>

<p>  end
end
```</p>

<p>Ah hah, there marked on lines 5 and 6 is the <code>git pull</code> for the <code>_deploy</code> directory.  Smart, they are pulling down any
changes you may have made manually to your static pages.  For example, using GitHub&rsquo;s edit file feature to edit a file
directly in the browser.</p>

<p>I wonder why that didn&rsquo;t work because as you recall, we setup the <code>origin</code> correctly.  Let&rsquo;s figure out why.</p>

<p><code>plain
C:\gd\code\eduncan911 [source +2 ~3 -0 !]&gt; cd .\_deploy
C:\gd\code\eduncan911\_deploy [master]&gt; git remote -v
origin
</code></p>

<p>Wha&hellip;  We already set this before.  What happened?  Well, I can tell you that it is because I re-ran the
<code>rake setup_github_pages</code> a 2nd and 3rd time.  If you recall from the setup_github_pages take, it doesn&rsquo;t care if you have
an existing deployment directory or not &ndash; it blows out and creates it again!</p>

<p>So, just go add the origin again.  <em>facepalm</em></p>

<p><code>plain
C:\gd\code\eduncan911\_deploy [master]&gt; git remote set-url --add origin git@github.com:eduncan911/eduncan911.github.io.git
C:\gd\code\eduncan911\_deploy [master]&gt; git remote -v
origin  git@github.com:eduncan911/eduncan911.github.io.git (fetch)
origin  git@github.com:eduncan911/eduncan911.github.io.git (push)
C:\gd\code\eduncan911\_deploy [master]&gt; git remote -v
C:\gd\code\eduncan911\_deploy [master]&gt; cd ..
C:\gd\code\eduncan911 [source +2 ~3 -0 !]&gt;
</code></p>

<p>Before we continue, let&rsquo;s take a quick look at that second error.  Scrolling down to <code>line 18</code> in the same ruby
task above we see a <code>git push origin master</code> being executed.</p>

<p>Because we had no <code>origin</code> set correctly, this would cause yet another error.  We got that fixed already though with
the above <code>git remote set-url --add</code> command.</p>

<p>Let&rsquo;s try to deploy again now that we fixed the <code>_deploy</code> folder.</p>

<p>``` plain
C:\gd\code\eduncan911 [source +2 ~3 -0 !]> rake deploy</p>

<h2>Set the codepage to 65001 for Windows machines</h2>

<h2>Deploying branch to Github Pages</h2>

<h2>Pulling any updates from Github Pages</h2>

<p>cd _deploy
Warning: Permanently added &lsquo;github.com,192.30.252.131&rsquo; (RSA) to the list of known hosts.
There is no tracking information for the current branch.
Please specify which branch you want to merge with.
See git-pull(1) for details</p>

<pre><code>git pull &lt;remote&gt; &lt;branch&gt;
</code></pre>

<p>If you wish to set tracking information for this branch you can do so with:</p>

<pre><code>git branch --set-upstream-to=origin/&lt;branch&gt; master
</code></pre>

<p>cd &ndash;
rm -rf <em>deploy/assets
rm -rf </em>deploy/atom.xml
rm -rf <em>deploy/blog
rm -rf </em>deploy/favicon.png
rm -rf <em>deploy/images
rm -rf </em>deploy/index.html
rm -rf <em>deploy/javascripts
rm -rf </em>deploy/robots.txt
rm -rf <em>deploy/sitemap.xml
rm -rf </em>deploy/stylesheets</p>

<h2>Copying public to _deploy</h2>

<p>cp -r public/. <em>deploy
cd </em>deploy</p>

<h2>Committing: Site updated at 2014-04-03 23:21:58 UTC</h2>

<h1>On branch master</h1>

<p>nothing to commit, working directory clean</p>

<h2>Pushing generated _deploy website</h2>

<p>Warning: Permanently added &lsquo;github.com,192.30.252.131&rsquo; (RSA) to the list of known hosts.
Counting objects: 79, done.
Delta compression using up to 12 threads.
Compressing objects: 100% (72/72), done.
Writing objects: 100% (79/79), 186.45 KiB | 0 bytes/s, done.
Total 79 (delta 1), reused 0 (delta 0)
To git@github.com:eduncan911/eduncan911.github.io.git
 * [new branch]      master &ndash;> master</p>

<h2>Github Pages deploy complete</h2>

<p>cd &ndash;
C:\gd\code\eduncan911 [source +2 ~3 -0 !]>
```</p>

<p>Humm, a few warnings about no tracking information for the remote branch, which we renamed to be <code>source</code> from <code>master</code>
if you recall from earlier.  I think this is normal because we haven&rsquo;t pushed <code>source</code> up yet.</p>

<h3>git push origin source</h3>

<p>Now, let&rsquo;s see if we can fix the tracking information for our <code>source</code> branch by pushing our changes up.</p>

<p><code>plain
git add .
git commit -m 'initial commit of source branch'
git push origin source
</code></p>

<p>Seems like we are good here.</p>

<p>Let&rsquo;s head over to our GitHub Page and see what&rsquo;s there in the repo.  What&rsquo;s this?  My master is a nice and clean static
site?  Sweet!</p>

<p><a href="https://github.com/eduncan911/eduncan911.github.io/tree/master">github.com/eduncan911/eduncan911.github.io/tree/master</a></p>

<p>And lookie here, the <code>source</code> branch has the source!</p>

<p><a href="https://github.com/eduncan911/eduncan911.github.io/tree/source">github.com/eduncan911/eduncan911.github.io/tree/source</a></p>

<p>I&rsquo;m sticking a fork in her and calling it&hellip;  These may be normal warnings with the way the remote tracking is handled
as I don&rsquo;t have a lot of experience with that part of git.</p>

<h2>It&rsquo;s all downhill from here</h2>

<p>If you have stuck with me this long, I have some good news &ndash; you&rsquo;re done!  Time to start blogging!</p>

<p>You can read the rest of the deployment guide from here as they have some useful tips.  Also, make sure to commit
your work (they mention this too).</p>

<p>My last piece of advice after you get the hang of things and create a few test posts is to look into these commands.</p>

<p><code>bash
rake generate   # Generates posts and pages into the public directory
rake watch      # Watches source/ and sass/ for changes and regenerates
rake preview    # Watches, and mounts a webserver at http://localhost:4000
</code></p>

<p>You&rsquo;ve already run <code>rake generate</code>; but, take a look at the other two.</p>

<p><code>rake watch</code> is nice to auto-generate files as you change them.</p>

<p><code>rake preview</code> is even better!  It will watch for and auto-generate your site; but, more so it runs a very lightweight
tiny webserver (much less tiny than IIS!) in the background where you can open a browser and hit refresh to your heart&rsquo;s
content.</p>

<p>I advise everyone to do that to keep the number of commits down because once  you have a few 100 pages, that generate and
deploy is going to take a long while.  Might as well get into the habit early!</p>

<p>~E</p>

<p>PS: I am thinking of renting a <a href="http://technichi.com/">Macbook Pro</a> because of the time lost with stuff like this
under Windows.  Argh&hellip;</p>
]]></content>
  </entry>
  
</feed>
