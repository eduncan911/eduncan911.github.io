<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Software | Eric Duncan]]></title>
  <link href="http://eduncan911.com/category/software/atom.xml" rel="self"/>
  <link href="http://eduncan911.com/"/>
  <updated>2014-06-13T15:40:46-04:00</updated>
  <id>http://eduncan911.com/</id>
  <author>
    <name><![CDATA[Eric Duncan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Best Cloud Computing and Security Talk EVAR]]></title>
    <link href="http://eduncan911.com/software/best-cloud-computing-and-security-talk-evar.html"/>
    <updated>2014-05-14T03:13:47-04:00</updated>
    <id>http://eduncan911.com/software/best-cloud-computing-and-security-talk-evar</id>
    <content type="html"><![CDATA[<p><a href="http://vimeo.com/95066828">James Mickens on distributed computing at PDX 2014</a></p>

<p><div class="embed-video-container"><iframe src="http://player.vimeo.com/video/95066828 "></iframe></div></p>

<p>This showed up in my twitter feed; so, I gave it 30m of my life and I am glad I did.</p>

<p><cite>#HatTip Xander Sherry <a href="https://twitter.com/xandersherry">https://twitter.com/xandersherry</a></cite></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Responsive Design Begins With the URL]]></title>
    <link href="http://eduncan911.com/software/design/responsive-design-begins-with-the-url.html"/>
    <updated>2014-05-07T11:27:36-04:00</updated>
    <id>http://eduncan911.com/software/design/responsive-design-begins-with-the-url</id>
    <content type="html"><![CDATA[<p><a href="http://www.smashingmagazine.com/2014/05/02/responsive-design-begins-with-the-url/">Responsive Design Begins with the URL</a></p>

<p><blockquote><p><img src="/blog/images/responsive-design-url-schema.jpg" title="&ldquo;Responsive Design URL Schema&rdquo;" ></p></p><p><p>The core principle in creating a potentially enormous website that will last forever is to get the information architecture right in the first place. This involves knowing your data objects and how they fit together. It should also determine the URL structure, which for Programmes is the most important aspect. Take the URL for Top Gear’s home page:</p></p><p><p><a href="http://www.bbc.co.uk/programmes/b006mj59">http://www.bbc.co.uk/programmes/b006mj59</a></p></p><p><p>After the domain name comes the word “programmes,” which is a simple, unchanging English word. It is intended to describe the object, and is not a brand or product name. Plurals are used so that the URL can be hacked backwards to retrieve an index.</p></p><p><p>Next is the programme identifier. Note the lack of hierarchy and the lack of a title. Titles change over time, and many programmes do not have a unique title, which would cause a clash. Hierarchies also change — a one-off pilot could be commissioned for a full series. Understanding your objects allows you to recognize what is permanent. In this case, nothing is particularly guaranteed to be permanent, so a simple ID is used instead. Users aren’t expected to type these URLs, though. They will usually arrive through a search engine or by typing in a friendly redirect that has been read out on air, such as bbc.co.uk/topgear. But the key principle of a permanent URL is that inward links are trusted to be shareable and work forever. Cool URIs don’t change.</p></p><p><p>A clear information architecture defines the URL scheme. A piece of content is given a clear canonical home, where appropriate. Links and aggregations between them then clearly appear.</p></p><p><p></p><footer><strong>David Marland <a href="http://www.smashingmagazine.com/2014/05/02/responsive-design-begins-with-the-url">http://www.smashingmagazine.com/2014/05/02/responsive-design-begins-with-the-url</a> Responsive Design Begins with the URL</strong></footer></blockquote></p>

<p>For a decade I have spent a considerable amount of time getting the URLs <em>right</em> for what the user was looking at.  I must have gone through 20 different iterations over the years trying out all sorts of designs, deep linking, &ldquo;walk the url backwards&rdquo; and so on.</p>

<p>You can see on my static site blog here that I paid close attention as well, trying out yet another theme.  I am on my 4th iteration of a url schema for my blog and it has become a PITA when having to keep redirects working of old urls, especially on <a href="https://github.com/eduncan911/eduncan911.github.io/tree/master/blog">this static site with no URL rewrite module</a>.</p>

<p>I almost went the <em>post_id</em> route here on this iteration; but, Jekyll (and therefore Octopress) makes the title url-safe already so I kept it.  Besides that, I agree that urls should play a role in your web architecture.</p>

<p>As long as we are talking about it, ASP.NET MVC&rsquo;s default <code>/Controller/Action/Id</code> has always pissed me off since I first started using it back in 2007.  Coming from a pure-RESTful background, the pure REST urls are more similar to <code>/Controller/Id/Action</code> so you end up with urls like this:</p>

<p><code>
/product/2832/
/product/2832/edit
/product/2832/clips
/product/2832/videos
</code></p>

<p>And so on.  Which, actually, falls inline with what the BBC article above was saying.</p>

<p><cite>#HatTip ForgetFoo <a href="http://forgetfoo.com">http://forgetfoo.com</a></cite></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Avocode]]></title>
    <link href="http://eduncan911.com/software/avocode.html"/>
    <updated>2014-05-04T19:24:04-04:00</updated>
    <id>http://eduncan911.com/software/avocode</id>
    <content type="html"><![CDATA[<p><a href="http://avocode.com/">The bridge between designers and developers</a></p>

<p><blockquote><p></p></p><p><p><div class="embed-video-container"><iframe src="http://player.vimeo.com/video/93386152 "></iframe></div></p></p><p><p>ALWAYS BE IN SYNC<br/>Share with a link and instantly get updates from your designer.<br/>No more e-mail attachments or huge PSD uploads.</p></p><p><p>WEB &amp; NATIVE APP<br/>Preview and inspect PSDs on the web or use the native app<br/>on any platform &ndash; Mac, Windows or even Linux.</p></p><p><p>EVERYTHING FROM A PSD<br/>Choose anything from a PSD and get exactly what<br/>you need – CSS, SVG, images, fonts or colors…</p></p><p><p></p></blockquote></p>

<p>You know, I am starting to get that &ldquo;designer&rdquo; itch again.  I am not a designer; but, I can pull
something outta my ass every once in a while.  Going to try to get a private beta to see if
I can use this for some projects as well.</p>

<p><cite>#HatTip ForgetFoo <a href="http://forgetfoo.com">http://forgetfoo.com</a></cite></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Static Blog Boom]]></title>
    <link href="http://eduncan911.com/software/the-static-blog-boom.html"/>
    <updated>2014-05-01T13:58:40-04:00</updated>
    <id>http://eduncan911.com/software/the-static-blog-boom</id>
    <content type="html"><![CDATA[<p>There is a new movement taking place in web development over the last few years.
It is called <code>static sites</code>. Just as it sounds, it is simply a collection of <code>.html</code>, <code>.css</code>, <code>.js</code> and images that serves up a complete site. What you may not know is that there are literately 100s of frameworks out there that generate these static sites for you from a single common theme/template.</p>

<h2>Static Site Generators</h2>

<p>I stumbled upon a collection of these frameworks here:</p>

<p><a href="http://staticsitegenerators.net/">http://staticsitegenerators.net/</a></p>

<p>This is pure opinion, but it would seem that most of these frameworks came
out of the Linux/OSX world from developers that needed to generate a static site for this or that.  Those that did it often, needed a way to regenerate a whole static site by just changing, say, the header area.</p>

<p>I know that after my recent conversion to <a href="http://octopress.org">Octopress</a> (aka Jekyll) I have been brainstorming about my own static site generator.  As you can see in the link above, I am not the only one that had a similar thought.</p>

<h2>Advantages to Static Sites</h2>

<p>If you sit back and think about it, there are a number of advantages for running a static site.</p>

<h3>Hosting costs</h3>

<p>Can you really get any cheaper than free?  GitHub pages can host your static site for free.  If you really want to pay for something, then upload your static site files to Amazon S3 file storage and serve your site from there &ndash; for about $0.25/mo for 1000 uniques.</p>

<h3>Security</h3>

<p>You never have to worry about someone hacking your site.  No SQL injection, XSS, CSRF attacks.</p>

<p>Even if someone was to gain access to your hosting account, there is no database or code to hide backdoors in.</p>

<h3>Defacing</h3>

<p>If someone gains access to where you are storing the files and defaces the site, just redeploy &ndash; which overwrites everything.</p>

<h3>Simplicity (aka Serenity)</h3>

<p>It is just a bunch of html, images, css and js files.  You really can&rsquo;t get any simpler than that.</p>

<h2>How a static site becomes dynamic</h2>

<p>The real power behind these static sites is the interactions that the end user have on your site using 3rd party remote widgets.  It makes your site seem fairly dynamic by giving recent information. Just to give you an idea, here are a few widgets built into most of these frameworks:</p>

<ul>
<li>Flickr photo albums, single photos</li>
<li>Disqus commenting system</li>
<li>Google Forms/Surveys (aka Contact Us, product support, etc)</li>
<li>Stackexchange Profile</li>
<li>GitHub Profile</li>
<li>GitHub Repo browser</li>
<li>Twitter feed, single quotes</li>
<li>Sitemap generators</li>
</ul>


<p>&hellip;and a lot more.  By using these widgets, and carefully skinned to look like your site, it creates a dynamic site of sorts that continually updates even it really is a static site.</p>

<p>I use Google Forms here on my site as an example for my <a href="/contact">Contact page</a>.  It looks and feels like I actually did something on the backend to send me an email &ndash; I didn&rsquo;t.</p>

<h2>Customizing the generated output</h2>

<p>Almost all of these frameworks support plugins and extensions allowing for customizing the generated site to your preferences.  Basically these plugins work like this.</p>

<ul>
<li>Parse article/post content, usually on some plain-text form like Markdown</li>
<li>Process categories and tags</li>
<li>Redirects by creating <code>/old-url/index.html</code> kind of pages</li>
<li>Code highlighting</li>
<li>Pagination</li>
</ul>


<p>And so on.  Perhaps an indicator of the quality of the framework is the article/post/page parser with its extensions built into it, and how extensible it is.  Take Octopress for example, it has butt load:</p>

<ul>
<li>blockquote</li>
<li>code</li>
<li>date</li>
<li>GitHub gist</li>
<li>img</li>
<li>pullquote</li>
<li>video</li>
</ul>


<p>Creating your own tag is fairly straight forward using a well documented Liquid Template parser for ruby.</p>

<h2>Speeding up writing is key (for me at least)</h2>

<p>I am now free to write my thoughts in any place I can write notepad.  I insert things like <code>{% blockquote %}</code> and write a small blurb and I&rsquo;m done.  I&rsquo;ve been wanting to switch to Markdown since I started using it with Unfuddle many many years ago, and now I can.</p>

<p>If this post made you think about making more sites static, drop me a line in the comments below.</p>

<p>~E</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Please Put Your Blog Under Source Control]]></title>
    <link href="http://eduncan911.com/software/please-put-your-blog-under-source-control.html"/>
    <updated>2014-04-07T10:37:08-04:00</updated>
    <id>http://eduncan911.com/software/please-put-your-blog-under-source-control</id>
    <content type="html"><![CDATA[<p>There are many benefits to both your readers and yourself if you were to put your
blog under source revisions.  I would go as far to say that you own it to the community
to publish all revisions of your blog that was ever public for pure archiving reasons.</p>

<h2>Revision those files you linked to</h2>

<p>Recently I setup <a href="/software/my-hackers-blog.html">my hacker&rsquo;s blog</a>
and I had a need to import my old blog posts from CommunityServer.  The steps were a bit
hackery itself as I had to get data out of CS and into a format that one of the common
importers of Jekyll/Octopress could read from.  I chose BlogML to export as that seemed
to have the oldest support (my CS blog was 9 years old).</p>

<h2>Finding that old file that no one cares about any longer</h2>

<p>After spending a few days off and on tweaking the exported BlogML data, I basically found only
a single BlogML importer for Jekyll.  This is why I chose this route to begin with.  So, when
it came time to perform the import guess what?  The blogml.rb ruby script links were all broken!</p>

<p>Then I had a thought: if the author of the script was running Jekyll/Octopress, especially on
GitHub pages, then perhaps there is a revision history.</p>

<p>I had to dig through about 2 years of commits; but, I found it!</p>

<p><a href="https://github.com/philippkueng/philippkueng.github.com/blob/30ef1570f06d33938b18d5eee7767d6641b9a779/source/_import/blogml.rb">Commit 30ef1570f0 for blogml.rb from author</a></p>

<p>You can even backup a folder and see his entire snapshot of his blog during the import process.</p>

<p>Thank you Philipp Küng for revisioning your blog.</p>

<h2>Changing blogging platforms</h2>

<p>What if you are switch blogging software every 5 years?  Keep old snapshots and revisions of your old site
in tags and refer to them in your change revisions.  Even if you don&rsquo;t keep the same technology,
having an old copy around for public reference can be useful to the community.</p>

<h2>Domain expiration, hosting company goes under, etc</h2>

<p>So your domain expires or got snatched up by a squatter?  Or your hosting company pulls the plug?
At least having a revision available will allow you the flexibility, even if you don&rsquo;t continue
a blog any longer.</p>

<h2>Updates, changes and redactions</h2>

<p>Opinions online can be heated and made in jest.  You may have published something that you wish you
didn&rsquo;t.  Or after some nice comments are posted, you update the post.  Maybe a DMCA takedown request
forced you to remove a piece of content.  Wouldn&rsquo;t it be nice to know and show the revision history of your post?</p>

<p>I know that me for one is going to stop with the dozen tiny edits for spelling and grammar because
of this.  Who knows, it may cause me to actually <em>think</em> before publishing.</p>

<p>And FYI, you can see each revision of each post and page I make to my site here.</p>

<h2>Backups</h2>

<p>Similar to the above, having a full backup you can take with you can be advantageous.</p>

<p>Personally, I not only publish my source code here at GitHub; but, I also have an additional
remote added for BitBucket and always do the following:</p>

<p>``` bash</p>

<blockquote><p>git add .
git commit -m &ldquo;fixed spelling and corrected a quote&rdquo;
git push backup source
git push origin source
```</p></blockquote>

<p>Now, you can do this for any source code sure.  It&rsquo;s these next steps that make it viable.</p>

<p>``` bash</p>

<blockquote><p>rake deploy</p>

<pre><code>^- this publishes the live site to GitHub pages
</code></pre>

<p>cd ./_deploy
git push backup master
```</p></blockquote>

<p>Yep, I also deploy a 2nd copy to my BitBucket account.  Even though it will never be used as a real
site, it&rsquo;s a full backup of the live site in the master branch.</p>

<p>The Optopress command <code>rake deploy</code> also pushed it up to GitHub pages on master &ndash; that&rsquo;s how it
&ldquo;publishes.&rdquo;  So all I have to do is make a quick backup.  What&rsquo;s even nice is the script does
a pull request as well, to keep the _deploy folder in sync so when I do perform a backup, it&rsquo;s all there.
I am new to git branch tracking; so, I may have to tweak that last command by forcing <code>-f</code> up the
push to backup if it gets out of sync or something.</p>

<p>Finally, having multiple copies of your repo online and publicly accessible can help with&hellip;</p>

<h2>Government seizers</h2>

<p>All too often, governments are taking domains and peoples' hosting accounts in the name of DMCA and
copyright infringements.  Oh, and free speech as well.</p>

<p>Why not publish your blog open source?</p>

<p>The last step to further solidify your published site and source would be automate a bittorrent release
for every deployment.  Doesn&rsquo;t seem to far out of reach with these snapshots readily available.</p>

<h2>Death</h2>

<p>What if you were to pass away?  Would your annual payment to your domains continue for decades? What
about the fee you pay your hosting company?  Same as the previous reason, publishing it may very well
keep it going for a long time even if the domain is gone, people can still get to the source.</p>

<p>Especially at a place like GitHub pages.</p>

<h2>Why not?</h2>

<p>I hope I sparked some food for thought and I would like your opinions on the matter.</p>

<p>I cannot come up with solid reasons for not to publish your blog open source.  I know at first I
wrestled with the idea that:</p>

<p><blockquote><p>Wait, my database connection strings would be publicly visible.  I can&rsquo;t do that.</p></blockquote></p>

<p>Then it hit me that Octopress/Jekyll is completely static &ndash; there are no database connection strings.
Q
<blockquote><p>My secret keys for my 3rd party integrations may be exposed.</p></blockquote></p>

<p>Actually not.  Twitter, Disqus, LinkedIn and so on all use public kesy/ids to identify you with their
widgets.  Even Flickr allows for a vast array of public apis.</p>

<p>You would only need private keys on your site if you were programatically pushing or changing content
elsewhere in a write-permission need.  But again, this was planned as a static site &ndash; no problem here.</p>

<p><blockquote><p>I have private downloads I don&rsquo;t want others to see.</p></blockquote></p>

<p>Ok, this one did get me.  I do have private downloads of password-protected files on my old site.</p>

<p>I have to think back to the longevity of my blog &ndash; do I want the downloads archived forever?  Short
answer, no.</p>

<p>~E</p>
]]></content>
  </entry>
  
</feed>
