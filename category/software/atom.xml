<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Software | Eric Duncan]]></title>
  <link href="http://eduncan911.com/category/software/atom.xml" rel="self"/>
  <link href="http://eduncan911.com/"/>
  <updated>2014-07-13T11:15:19-04:00</updated>
  <id>http://eduncan911.com/</id>
  <author>
    <name><![CDATA[Eric Duncan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to: Key-Based SSH Logins With PuTTY]]></title>
    <link href="http://eduncan911.com/software/tools/key-based-ssh-logins-with-putty.html"/>
    <updated>2014-07-11T12:43:10-04:00</updated>
    <id>http://eduncan911.com/software/tools/key-based-ssh-logins-with-putty</id>
    <content type="html"><![CDATA[<p>All too often I keep Googling this procedure to sign into SSH terminals with certificate keys since I&rsquo;ve been switching to Linux for development.  Like my previous post on how to <a href="/blog/archives/create-a-bootable-usb-drive-with-windows.html">Create a Bootable USB Drive with Windows</a>, I felt it was time to write my own step-by-step guide for my future reference.</p>

<p>First, let me explain why I do this.</p>

<h2>Why use SSH keys to login?</h2>

<p>Everyone knows you log into Windows and Linux machines with a username and password.  The obvious issue is, what happens when someone gets your username and password?  Yep, they can now login.</p>

<p>What if there was a way to <em>sign</em> your specific machine, say your desktop, to only allow connections from it?  Then, combine that machine signature with yet another password (called a passphrase) for an impromptu two-factor authentication to login?  (Factor 1, the certificate key; Factor 2, your passphrase)</p>

<p>That is my take on why I use SSH keys to sign into Linux machines.  You not only need my password; but, you also need my certificate.</p>

<h3>Other Reasons to use SSH keys for logins</h3>

<p>There are other reasons to use SSH keys for logins.  I also use them for script automation across multiple Linux machines, in which the script needs to log into the remote machine to perform commands.  The easiest way to do that is to not use a passphrase, then the user account that the script runs under will have the ssh keys added allowing them to remotely signin.  Less secure, but also less of a headache to setup.  You can still use a passphrase in your scripts, and even encrypt it so it isn&rsquo;t in the clear text.  That is beyond this post though.</p>

<p>Ok, enough with reasoning &ndash; let&rsquo;s setup PuTTY now.</p>

<h2>First, the PuTTY Quirks</h2>

<p>PuTTY is a great app for Windows.  It&rsquo;s GUI though is a little odd and takes some getting used to.  Specifically, it is a bit quirky around the Sessions, aka Profiles that allows you to save settings for quick connections in the future (just select it, click Open and that&rsquo;s it).  Unless you hit Load, Save and Delete in the right sequence, things won&rsquo;t be loaded, saved or deleted.</p>

<p>Because of this, I recommend setting up your Session profile first before we get started with SSH keys.  Nothing worse than going through all the steps to create a Session profile, and missing one step, having it all wiped out to start over.</p>

<h2>Create and Save a PuTTY Session profile</h2>

<p>Here&rsquo;s the steps I take to create a Session profile.</p>

<ul>
<li>Open PuTTY and you should be in the Session category on the left.</li>
<li>For the <code>Host Name</code>, enter the DNS or IP address.  E.g. mylinuxvm.cloudapp.net</li>
<li>Make sure <code>Port 22</code> and <code>SSH</code> options are set (usually the default).</li>
</ul>


<p><img src="/blog/images/key-based-ssh-logins-with-putty/1-putty-create-session.png" title="Create Session Profile in PuTTY" ></p>

<ul>
<li>Set a default <code>Username</code> to login with by clicking the category <code>Connection</code> then <code>Data</code>.  Enter your username in the <code>Auto-login username</code> text box.</li>
</ul>


<p><img src="/blog/images/key-based-ssh-logins-with-putty/2-putty-create-session.png" title="Auto-Login Username in PuTTY Session" ></p>

<ul>
<li><p>Finally, to save your Session profile, click back on the Session category on the left.  Then under the <code>Saved Sessions</code> textbox, enter a name for this session. I like to call my sessions the name of my VMs, e.g. mylinuxvm.cloudapp.net.</p></li>
<li><p>Now, press the Save button.</p></li>
</ul>


<p><img src="/blog/images/key-based-ssh-logins-with-putty/3-putty-create-session.png" title="Save Session Profile in PuTTY" ></p>

<p>You have now created your first Session profile in PuTTY.  It&rsquo;s usually during this Save process that I may inadvertently click on one of the existing Saved Sessions, in which your profile is now completed wiped out and you have to start all over.</p>

<p>It is now time to generate your Public and Private key pair that you will need to setup on the remote Linux box.</p>

<h2>Generate a PuTTY Public/Private Key Pair</h2>

<p>The next step is to generate the key pair that you&rsquo;ll configure your shell to use.  We do this with PuTTY&rsquo;s included <code>PUTTYGEN.EXE</code> file in the directory of where you installed/unzipped PuTTY to.</p>

<p>Running <code>PUTTYGEN.EXE</code> opens a new window.</p>

<p><img src="/blog/images/key-based-ssh-logins-with-putty/4-generate-ssh-keys-in-putty.png" title="&ldquo;Generate SSH Keys in PuTTY&rdquo;" ></p>

<p>You will need to <code>Generate</code> a new public/private key pair and save both the public key and private key separately to continue.  Start by clicking the <code>Generate</code> button, and move your mouse around to generate a random key.</p>

<p><img src="/blog/images/key-based-ssh-logins-with-putty/5-generate-ssh-keys-in-putty.png" title="&ldquo;Generate SSH Keys in PuTTY&rdquo;" ></p>

<p>Once the key pair has been generated, you have a few options.  It is highly recommend to change the following:</p>

<ul>
<li>Change the <code>Key comment</code> to be your email address, or machine name.</li>
<li>Set a passphrase, you will use this as your password when connecting each time.</li>
</ul>


<p>Now, it is time to save the Public key file and Private key file.  Click the buttons and save each file in a safe place.</p>

<p><img src="/blog/images/key-based-ssh-logins-with-putty/6-generate-ssh-keys-in-putty.png" title="&ldquo;Generate SSH Keys in PuTTY&rdquo;" ></p>

<p>CAUTION: If you are going to disable password logins for your box, and only allow SSH key logins, you will want to keep the private key in a very safe, and backed up, place as if you loose it you will loose access to the machine.</p>

<h2>Take the Public key, and assign it to your Linux box</h2>

<p>Now it is time to copy the contents of the Public key file and place it on the remote server.</p>

<p>Load up PuTTY again and click on your Saved Session, then click Open.  Enter your normal username&rsquo;s password when you setup the Linux box when prompted &ndash; do not enter your Passphrase just yet.  If prompted for the security warning, click Yes as it is your first connection to the server.</p>

<p>You are going to create an <code>authorized_keys2</code> file in your shell, and copy your public key text directly into it.</p>

<p>For this, I am going to assume you already have an ~/.ssh/ directory.  If not, just create it:</p>

<p><code>
mkdir ~/.ssh
chmod 700 ~/.ssh
</code></p>

<p>Now, create the file:</p>

<p><code>
pico ~/.ssh/authorized_keys2
</code></p>

<p>You must now paste the entire Public key, all on one line, here within the editor.  Again, make sure it is all on one line.  It should look like this:</p>

<p><img src="/blog/images/key-based-ssh-logins-with-putty/7-copy-public-ssh-key-to-shell.png" title="&ldquo;Linux SSH Public Key Setup for PuTTY&rdquo;" ></p>

<p>In Pico (now nano), press <code>CTRL-X</code> to exit.  It will ask you to save, press <code>Y</code> and you are done.</p>

<p>It is recommended to set the permissions read/write for your user only.  To do this, execute the following:</p>

<p><code>
chmod 600 ~/.ssh/authorized_keys2
</code></p>

<p>Type <code>exit</code> or close your PuTTY, you are done with the shell.</p>

<h2>Set the Private Key in your PuTTY Session Profile</h2>

<p>Remember that Session profile we first created at the beginning?  Now it is time to set it up to use your new public/private key.</p>

<p>Open PuTTY yet again and when prompted for which Saved session, we have to be a little careful with the quirkiness.  You will want to <code>Load</code> the Saved session first, before we can modify it.</p>

<p>Select your Saved Session you previously created, and click the <code>Load</code> button.</p>

<p><img src="/blog/images/key-based-ssh-logins-with-putty/8-set-private-key-in-PuTTY-for-ssh-login.png" title="&ldquo;Set SSH Private Key in PuTTY for SSH Key-Based Login&rdquo;" ></p>

<p>Then on the left, click the <code>Connection -&gt; SSH -&gt; Auth</code> category.</p>

<p>Click the Browse button and select the previously saved <code>Private key</code> this time.</p>

<p><img src="/blog/images/key-based-ssh-logins-with-putty/9-set-private-key-in-PuTTY-for-ssh-login.png" title="&ldquo;Set SSH Private Key in PuTTY for SSH Key-Based Login&rdquo;" ></p>

<p>Almost done, you need to go back and <code>Save</code> your Session profile again.  Do this by clicking the Session category on the left again.</p>

<p>Simply press <code>Save</code> here.  Do nothing else. Do not click on your previous Saved Session, as this will erase what you just changed.  Do not reload it, as that will erase it again.  Yep, PuTTY quirkiness.  Just click <code>Save</code> and you are done.</p>

<h2>Completed.  Now, connect.</h2>

<p>Now it is time to test it.  Click on your Saved Session, and click Open.  You should be created with something similar to this:</p>

<p><img src="/blog/images/key-based-ssh-logins-with-putty/10-logging-in-with-putty-ssh-key.png" title="&ldquo;Logging in with PuTTY SSH Key-Base Authentication&rdquo;" ></p>

<p>Enter your passphrase you setup at the beginning of this guide, and that should be it.</p>

<h2>Final Thoughts</h2>

<p>While it is not recommended, you could skip the passphrase creation and leave it blank.  This can give you a kind of auto-login when connecting.  But do note, anyone who gets your private key file can log into that shell with no password as well.</p>

<p>You are also able to setup multiple public keys for a single shell account by adding additional lines to that <code>authorized_keys2</code> file &ndash; one per line.  This can help segment control to multiple parties logging into the same machine (say a dev ops team that deploys &ndash; each member gets their own public/private key pair to use).  That way, you can reject a login at a later time by simply removing the line from the <code>authorized_keys2</code> file.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Best Cloud Computing and Security Talk EVAR]]></title>
    <link href="http://eduncan911.com/software/best-cloud-computing-and-security-talk-evar.html"/>
    <updated>2014-05-14T03:13:47-04:00</updated>
    <id>http://eduncan911.com/software/best-cloud-computing-and-security-talk-evar</id>
    <content type="html"><![CDATA[<p><a href="http://vimeo.com/95066828">James Mickens on distributed computing at PDX 2014</a></p>

<p><div class="embed-video-container"><iframe src="http://player.vimeo.com/video/95066828 "></iframe></div></p>

<p>This showed up in my twitter feed; so, I gave it 30m of my life and I am glad I did.</p>

<p><cite>#HatTip Xander Sherry <a href="https://twitter.com/xandersherry">https://twitter.com/xandersherry</a></cite></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Responsive Design Begins With the URL]]></title>
    <link href="http://eduncan911.com/software/design/responsive-design-begins-with-the-url.html"/>
    <updated>2014-05-07T11:27:36-04:00</updated>
    <id>http://eduncan911.com/software/design/responsive-design-begins-with-the-url</id>
    <content type="html"><![CDATA[<p><a href="http://www.smashingmagazine.com/2014/05/02/responsive-design-begins-with-the-url/">Responsive Design Begins with the URL</a></p>

<p><blockquote><p><img src="/blog/images/responsive-design-url-schema.jpg" title="&ldquo;Responsive Design URL Schema&rdquo;" ></p></p><p><p>The core principle in creating a potentially enormous website that will last forever is to get the information architecture right in the first place. This involves knowing your data objects and how they fit together. It should also determine the URL structure, which for Programmes is the most important aspect. Take the URL for Top Gear’s home page:</p></p><p><p><a href="http://www.bbc.co.uk/programmes/b006mj59">http://www.bbc.co.uk/programmes/b006mj59</a></p></p><p><p>After the domain name comes the word “programmes,” which is a simple, unchanging English word. It is intended to describe the object, and is not a brand or product name. Plurals are used so that the URL can be hacked backwards to retrieve an index.</p></p><p><p>Next is the programme identifier. Note the lack of hierarchy and the lack of a title. Titles change over time, and many programmes do not have a unique title, which would cause a clash. Hierarchies also change — a one-off pilot could be commissioned for a full series. Understanding your objects allows you to recognize what is permanent. In this case, nothing is particularly guaranteed to be permanent, so a simple ID is used instead. Users aren’t expected to type these URLs, though. They will usually arrive through a search engine or by typing in a friendly redirect that has been read out on air, such as bbc.co.uk/topgear. But the key principle of a permanent URL is that inward links are trusted to be shareable and work forever. Cool URIs don’t change.</p></p><p><p>A clear information architecture defines the URL scheme. A piece of content is given a clear canonical home, where appropriate. Links and aggregations between them then clearly appear.</p></p><p><p></p><footer><strong>David Marland <a href="http://www.smashingmagazine.com/2014/05/02/responsive-design-begins-with-the-url">http://www.smashingmagazine.com/2014/05/02/responsive-design-begins-with-the-url</a> Responsive Design Begins with the URL</strong></footer></blockquote></p>

<p>For a decade I have spent a considerable amount of time getting the URLs <em>right</em> for what the user was looking at.  I must have gone through 20 different iterations over the years trying out all sorts of designs, deep linking, &ldquo;walk the url backwards&rdquo; and so on.</p>

<p>You can see on my static site blog here that I paid close attention as well, trying out yet another theme.  I am on my 4th iteration of a url schema for my blog and it has become a PITA when having to keep redirects working of old urls, especially on <a href="https://github.com/eduncan911/eduncan911.github.io/tree/master/blog">this static site with no URL rewrite module</a>.</p>

<p>I almost went the <em>post_id</em> route here on this iteration; but, Jekyll (and therefore Octopress) makes the title url-safe already so I kept it.  Besides that, I agree that urls should play a role in your web architecture.</p>

<p>As long as we are talking about it, ASP.NET MVC&rsquo;s default <code>/Controller/Action/Id</code> has always pissed me off since I first started using it back in 2007.  Coming from a pure-RESTful background, the pure REST urls are more similar to <code>/Controller/Id/Action</code> so you end up with urls like this:</p>

<p><code>
/product/2832/
/product/2832/edit
/product/2832/clips
/product/2832/videos
</code></p>

<p>And so on.  Which, actually, falls inline with what the BBC article above was saying.</p>

<p><cite>#HatTip ForgetFoo <a href="http://forgetfoo.com">http://forgetfoo.com</a></cite></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Avocode]]></title>
    <link href="http://eduncan911.com/software/avocode.html"/>
    <updated>2014-05-04T19:24:04-04:00</updated>
    <id>http://eduncan911.com/software/avocode</id>
    <content type="html"><![CDATA[<p><a href="http://avocode.com/">The bridge between designers and developers</a></p>

<p><blockquote><p></p></p><p><p><div class="embed-video-container"><iframe src="http://player.vimeo.com/video/93386152 "></iframe></div></p></p><p><p>ALWAYS BE IN SYNC<br/>Share with a link and instantly get updates from your designer.<br/>No more e-mail attachments or huge PSD uploads.</p></p><p><p>WEB &amp; NATIVE APP<br/>Preview and inspect PSDs on the web or use the native app<br/>on any platform &ndash; Mac, Windows or even Linux.</p></p><p><p>EVERYTHING FROM A PSD<br/>Choose anything from a PSD and get exactly what<br/>you need – CSS, SVG, images, fonts or colors…</p></p><p><p></p></blockquote></p>

<p>You know, I am starting to get that &ldquo;designer&rdquo; itch again.  I am not a designer; but, I can pull
something outta my ass every once in a while.  Going to try to get a private beta to see if
I can use this for some projects as well.</p>

<p><cite>#HatTip ForgetFoo <a href="http://forgetfoo.com">http://forgetfoo.com</a></cite></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Static Blog Boom]]></title>
    <link href="http://eduncan911.com/software/the-static-blog-boom.html"/>
    <updated>2014-05-01T13:58:40-04:00</updated>
    <id>http://eduncan911.com/software/the-static-blog-boom</id>
    <content type="html"><![CDATA[<p>There is a new movement taking place in web development over the last few years.
It is called <code>static sites</code>. Just as it sounds, it is simply a collection of <code>.html</code>, <code>.css</code>, <code>.js</code> and images that serves up a complete site. What you may not know is that there are literately 100s of frameworks out there that generate these static sites for you from a single common theme/template.</p>

<h2>Static Site Generators</h2>

<p>I stumbled upon a collection of these frameworks here:</p>

<p><a href="http://staticsitegenerators.net/">http://staticsitegenerators.net/</a></p>

<p>This is pure opinion, but it would seem that most of these frameworks came
out of the Linux/OSX world from developers that needed to generate a static site for this or that.  Those that did it often, needed a way to regenerate a whole static site by just changing, say, the header area.</p>

<p>I know that after my recent conversion to <a href="http://octopress.org">Octopress</a> (aka Jekyll) I have been brainstorming about my own static site generator.  As you can see in the link above, I am not the only one that had a similar thought.</p>

<h2>Advantages to Static Sites</h2>

<p>If you sit back and think about it, there are a number of advantages for running a static site.</p>

<h3>Hosting costs</h3>

<p>Can you really get any cheaper than free?  GitHub pages can host your static site for free.  If you really want to pay for something, then upload your static site files to Amazon S3 file storage and serve your site from there &ndash; for about $0.25/mo for 1000 uniques.</p>

<h3>Security</h3>

<p>You never have to worry about someone hacking your site.  No SQL injection, XSS, CSRF attacks.</p>

<p>Even if someone was to gain access to your hosting account, there is no database or code to hide backdoors in.</p>

<h3>Defacing</h3>

<p>If someone gains access to where you are storing the files and defaces the site, just redeploy &ndash; which overwrites everything.</p>

<h3>Simplicity (aka Serenity)</h3>

<p>It is just a bunch of html, images, css and js files.  You really can&rsquo;t get any simpler than that.</p>

<h2>How a static site becomes dynamic</h2>

<p>The real power behind these static sites is the interactions that the end user have on your site using 3rd party remote widgets.  It makes your site seem fairly dynamic by giving recent information. Just to give you an idea, here are a few widgets built into most of these frameworks:</p>

<ul>
<li>Flickr photo albums, single photos</li>
<li>Disqus commenting system</li>
<li>Google Forms/Surveys (aka Contact Us, product support, etc)</li>
<li>Stackexchange Profile</li>
<li>GitHub Profile</li>
<li>GitHub Repo browser</li>
<li>Twitter feed, single quotes</li>
<li>Sitemap generators</li>
</ul>


<p>&hellip;and a lot more.  By using these widgets, and carefully skinned to look like your site, it creates a dynamic site of sorts that continually updates even it really is a static site.</p>

<p>I use Google Forms here on my site as an example for my <a href="/contact">Contact page</a>.  It looks and feels like I actually did something on the backend to send me an email &ndash; I didn&rsquo;t.</p>

<h2>Customizing the generated output</h2>

<p>Almost all of these frameworks support plugins and extensions allowing for customizing the generated site to your preferences.  Basically these plugins work like this.</p>

<ul>
<li>Parse article/post content, usually on some plain-text form like Markdown</li>
<li>Process categories and tags</li>
<li>Redirects by creating <code>/old-url/index.html</code> kind of pages</li>
<li>Code highlighting</li>
<li>Pagination</li>
</ul>


<p>And so on.  Perhaps an indicator of the quality of the framework is the article/post/page parser with its extensions built into it, and how extensible it is.  Take Octopress for example, it has butt load:</p>

<ul>
<li>blockquote</li>
<li>code</li>
<li>date</li>
<li>GitHub gist</li>
<li>img</li>
<li>pullquote</li>
<li>video</li>
</ul>


<p>Creating your own tag is fairly straight forward using a well documented Liquid Template parser for ruby.</p>

<h2>Speeding up writing is key (for me at least)</h2>

<p>I am now free to write my thoughts in any place I can write notepad.  I insert things like <code>{% blockquote %}</code> and write a small blurb and I&rsquo;m done.  I&rsquo;ve been wanting to switch to Markdown since I started using it with Unfuddle many many years ago, and now I can.</p>

<p>If this post made you think about making more sites static, drop me a line in the comments below.</p>

<p>~E</p>
]]></content>
  </entry>
  
</feed>
