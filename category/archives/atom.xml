<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Archives | Eric Duncan]]></title>
  <link href="http://eduncan911.com/category/archives/atom.xml" rel="self"/>
  <link href="http://eduncan911.com/"/>
  <updated>2014-04-28T18:30:00-04:00</updated>
  <id>http://eduncan911.com/</id>
  <author>
    <name><![CDATA[Eric Duncan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Power Naps for Everyone]]></title>
    <link href="http://eduncan911.com/blog/archives/power-naps-for-everyone.html"/>
    <updated>2011-04-25T19:28:35-04:00</updated>
    <id>http://eduncan911.com/blog/archives/power-naps-for-everyone</id>
    <content type="html"><![CDATA[<!-- more -->


<p><blockquote><p>Please note that this post was migrated to my new blog platform. There may be bad formating, broken links, images, downloads and so on.  If you need an item on this page, please contact me and I will do my best to get it from my backups.</p><footer><strong>~E</strong></footer></blockquote></p>

<p><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: left; border-top: 0px; border-right: 0px; padding-top: 0px" title="Mei sleeping on our couch." border="0" alt="Mei sleeping on our couch." align="left" src="http://eduncan911.com/blog/archives/images/How-to-Take-a-Nap_CD86/V__A2E1_thumb.jpg" width="256" height="193" />You may think you know how to take a nap.&#160; Lie down, close eyes, and whenever you wake up that's it.&#160; As it turns out, anything beyond 30 minutes puts you into danger of biting your work colleagues heads off when they interrupt you at 40 or 50 minutes into your nap.</p>


<p>  <p>I find myself constantly giving this advice to my work colleagues and family members.&#160; So, here&rsquo;s a blog post on what works very well for me.</p>  <p>There was a British study I read some 6 or so years ago that concluded a simple formula for power napping.&#160; And ever since I started to use this formula, it has worked wonders for my afternoon concentration.&#160; </p>  <p><strong>Preparation</strong></p>  <p>First and foremost, caffeine is your enemy here.&#160; If you are a 2+ cups of coffee drinker a day, &quot;because I need it to get going&quot;, then you may have to look elsewhere to prepare.&#160; There&rsquo;s nothing you can do when you crash in the afternoon but to drink more caffeine. </p>  <p>One idea would be to switch to Japanese Green Tea (not the cheap store-brands, but actual shredded green leafs that you control the dosage with).&#160; It is said that the caffeine in Japanese Green Tea absorbs at a much slower pace than coffee, which is less of a shock to your body (and lasts longer).&#160; This could allow you to come down from that high more easily, and allow a power nap.</p>  <p>I actually went caffeine-free for about 6 solid years.&#160; It completely changes your sleep habits (for the good).&#160; The only caffeine I take now is a cup of imported Japanese Green Tea in the morning (but no later than 12 noon), and a piece of chocolate here and there once a week or so.</p>  <p><strong>1. Remove all distractions.</strong></p>  <p>Turn off the computer, all distractions, close the office door, put up a sign in your cubical for Do Not Disturb &ndash; whatever it takes to remove all distractions.&#160; Also, silence any phones in your area (no txt, next chess move alerts, etc).</p>  <p>The problem with New York City when I moved here is I have yet to work in an office with dedicated offices, or even a cubical!&#160; Everyone is squeezed into tight open work areas, and demanded to be at full attention at all hours of the day.&#160; This is a horrible working environment and goes against our basic evolutional bodily functions.&#160; You are yawning at 2pm?&#160; Yeah, no wonder.&#160; All I have to say here is to bring a set of very large headphones, and set a workplace policy that when you have your headphones on, you are to not be disturbed.&#160; Works most of the time actually (even if head laying on the desk).</p>  <p><strong>2. Set an alarm for no longer than 30 minutes.&#160; </strong></p>  <p>You do not want to sleep past 30 minutes, no matter how tired you are.&#160; When the alarm goes off, you must get up &ndash; no exceptions.&#160; This is because your body will start to go into REM Stage I sleep at 35 to 40 minutes, and your body will be expecting to go through all 3 stages of REM &ndash; over the next 3 to 4 hours.&#160; Your body will start to release the chemicals needed for deep sleep at Stage I, and you don&rsquo;t want any of that.&#160; If your REM cycle is interrupted during any of these stages, well, that&rsquo;s when Mr. Groggy comes out and is introduced to your co-workers.</p>  <p>Tip: the use of a smartphone in your workplace is perfect here.&#160; Set some relaxing meditation music on your phone as well as an alarm on the phone for no longer than 30 minutes.&#160; Just turn off the ringer and text message sounds first.</p>  <p><strong>3. Set the proper conditions.</strong></p>  <p>If it is not possible to set a dark area, bring a sleep mask with you to work.&#160; Also, increase the temp if possible or put on a jacket &ndash; even if you are a bit warm already (your body lowers its temp during sleep cycles).&#160; If you cannot use a sleep mask or dim the lights, just lie your forehead on your arms on your desk. </p>  <p><strong>4. Remove all thoughts of stress.&#160; </strong></p>  <p>Do not think about anything related to work, no matter how fun it is.&#160; Think nothing of deadlines or tasks &ndash; that only begets an elevated heart rate. Think of the next vacation for the family instead, or your kids next birthday wish, or that hot rod car project: whatever makes you happy.&#160; </p>  <p><strong>If interrupted from slumberâ€¦</strong></p>  <p>There are a few rules to follow if you are interrupted by the kids, or co-workers.</p>  <ul>   <li>Get up immediately.&#160; </li>    <li>Do not attempt to go back to the nap for the next 2 to 3 hours.&#160; Anything earlier than that does not work. </li> </ul>  <p>This is why it is important to set the policy that once you are resting, you are at rest.&#160; </p>  <p><strong>Power Naps are not a replacement for the lack of sleep.</strong></p>  <p>One bad night of sleep?&#160; Fine.&#160; Two or more of consecutive bad nights of sleep?&#160; Power naps aren&rsquo;t going to help much.</p>  <p><strong>Tell the boss you are just thinking.</strong></p>  <p>The British study (if I could find it, I would &ndash; Binging <em>British Power Nap Studies</em> has an endless supply of links) also concluded that power napping makes you more focused in the 2 to 3 hours after the power nap.&#160; Additional research on the study yielded that people tend to have their best ideas just before and just after Stage I REM.</p>  <p>So the next time your boss asks if you are sleeping on the job, say no and you just are thinking.</p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[.NET 4.0, HTML, and a Potentially Dangerous Request.Form Value]]></title>
    <link href="http://eduncan911.com/blog/archives/net-4-0-html-and-a-potentially-dangerous-request-form-value.html"/>
    <updated>2010-04-09T01:51:41-04:00</updated>
    <id>http://eduncan911.com/blog/archives/net-4-0-html-and-a-potentially-dangerous-request-form-value</id>
    <content type="html"><![CDATA[<!-- more -->


<p><blockquote><p>Please note that this post was migrated to my new blog platform. There may be bad formating, broken links, images, downloads and so on.  If you need an item on this page, please contact me and I will do my best to get it from my backups.</p><footer><strong>~E</strong></footer></blockquote></p>

<p><img style="border-right-width: 0px; margin: 0px 0px 20px 20px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="validation" border="0" alt="validation" align="right" src="http://eduncan911.com/blog/archives/images/ApotentiallydangerousRequest.Formvalue.0_12CAD/validation.jpg" width="312" height="244" /> I ran across a breaking change tonight in the .NET 4.0 CLR's version of ASP.NET.&#160; The 4.0 version of the CLR binds to any HTTP request data to validate against.</p>


<p>  <p>The entire error you may see is:</p>  <blockquote>   <p><em>A potentially dangerous Request.Form value was detected from the client</em></p> </blockquote>  <p>This is because 4.0 now inspects all request data.&#160; Rather that being the cookies, urls, headers, etc.&#160; A very nice security upgrade, I might say.&#160; This will prevent a hacker from submitting malicious code through cookies or other means that you may be parsing. </p>  <h2>WYSIWYG and/or HTML Editors with .NET 4.0&rsquo;s CLR</h2>  <p>One common issue that immediately creeps up with this new security is when you want to use a rich-text editor or even a textbox that you want to submit HTML data through.&#160; This seems to be now impossible with .NET 4.0&rsquo;s CLR&rsquo;s default validation because you cannot override this behavior, if you remain in 4.0&rsquo;s validation.</p>  <p>And no, there is no way to selectively disable which items to validate.</p>  <h2>ASP.NET MVC&rsquo;s ValidateInput attribute does not work</h2>  <p>You, like me, most likely just slapped a big ol' fat <font face="Courier New">[ValidateInput]</font> attribute on your MVC controller&rsquo;s action method and thought you were done.&#160; But behold, the error still remains!</p>  <p>This is because your MVC website is running on the .NET 4.0 CLR and therefore continues to be validated.</p>  <h2>The Fix: HttpRuntime requestValidationMode</h2>  <p>The work-around is to place this into your web.config&rsquo;s <font face="Courier New">&lt;system.web&gt;</font> node:</p>  <p></p>  <pre><code>
&lt;httpRuntime requestValidationMode=&quot;2.0&quot; /&gt;</p>

<p></code></pre></p>

<p></p>




<p>What this does is it forces the CLR to only check the Page's html fields, which you can now overwrite with the <font face="Courier New">[ValidateInput]</font> attribute in MVC controllers, or the <font face="Courier New">&lt;%@ Page validateRequest=&quot;false&quot; %&gt;</font>, or any other normal means. </p>




<p>Sadly though, this also disables all of those other checks for the request data.&#160; Obviously, this is not a preferred work-around and even though VS 2010 is due for release on April 12th (just around the corner!), I do not see any notations of this being changed anytime soon.</p>




<p>If someone knows a work around for 4.0, please let me know.&#160; This is a great new feature, but sadly we must disable it for just about any website we develop on.</p>




<p>Unless we move to <a href="http://daringfireball.net/projects/markdown/" target="_blank">MarkDown</a> that is (which I am a big fan of, clients not so muchâ€¦).</p>




<p><a href="http://msdn.microsoft.com/en-us/library/system.web.configuration.httpruntimesection.requestvalidationmode(VS.100).aspx" target="_blank">You can find out more information about this over at MSDN</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Create a Bootable USB Drive With Windows]]></title>
    <link href="http://eduncan911.com/blog/archives/create-a-bootable-usb-drive-with-windows.html"/>
    <updated>2010-04-01T23:21:00-04:00</updated>
    <id>http://eduncan911.com/blog/archives/create-a-bootable-usb-drive-with-windows</id>
    <content type="html"><![CDATA[<!-- more -->


<p><blockquote><p>Please note that this post was migrated to my new blog platform. There may be bad formating, broken links, images, downloads and so on.  If you need an item on this page, please contact me and I will do my best to get it from my backups.</p><footer><strong>~E</strong></footer></blockquote></p>

<p><img style="border-right-width: 0px; margin: 0px 20px 20px 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="5805-1[1]" border="0" alt="5805-1[1]" align="left" mce_src="/blog/archives/images/CreateaBootableUSBDrive_F442/580511.jpg" width="244" height="167" src="http://eduncan911.com/blog/archives/images/CreateaBootableUSBDrive_F442/580511.jpg"> I find myself Bing-ing this every few months to make sure I included each and every step.&nbsp; So often, that I can't believe I still Bing it.&nbsp; So below is a manual for anyone (mostly me) to follow in the future.</p>


<p>  <h2>USB Boot Linux, Windows or any other operating system</h2>  <p>You will be creating a bootable usb drive with Windows 7 or Vista&rsquo;s diskpart utility.&nbsp; Even though you are using Windows to create the bootable device, the source disk should not matter as long as the os supports booting from fat32.&nbsp; You can have a Linux iso mounted as the source, and the usb stick will end up being a Linux bootable usb.</p>  <p>Without further ado, on with the steps.</p>  <h2>Creating a bootable USB device</h2>  <p>In Windows 7 or Vista, open a command prompt.&nbsp; A shortcut is to press <font face="Courier New"><b>WINDOWS-KEY + R</b></font> and then type <font face="Courier New"><b>CMD</b></font>, press <font face="Courier New"><b>ENTER</b></font>.</p>  <p><font face="Courier New">C:\Users\eduncan911&amp;gt; diskpart</font></p>  <p><font face="Courier New">DISKPART&gt; list disk</font></p>  <blockquote>   <p>Inspect the list and note which one is the USB drive.&nbsp; Tip: It&rsquo;s most likely the last one.</p> </blockquote>  <p><font face="Courier New">DISKPART&gt; select disk 1</font></p>  <blockquote>   <p>Where 1 is the disk number from the <font face="Courier New">list disk</font> command above.</p> </blockquote>  <p><font face="Courier New">DISKPART&gt; detail disk</font></p>  <blockquote>   <p>The <font face="Courier New">detail disk</font> step above lists the details of the selected disk.&nbsp; Make sure the correct one is listed.&nbsp; If not, go back to <font face="Courier New">list disk</font> and start over.</p> </blockquote>  <p><font face="Courier New">DISKPART&gt; clean</font></p>  <p><font face="Courier New">DISKPART&gt; create partition primary</font></p>  <p><font face="Courier New">DISKPART&gt; select partition 1</font></p>  <p><font face="Courier New">DISKPART&gt; active</font></p>  <p><font face="Courier New">DISKPART&gt; format fs=fat32 quick label=&ldquo;USB_16GB&rdquo;</font></p>  <p><font face="Courier New">DISKPART&gt; assign</font></p>  <p><font face="Courier New">DISKPART&gt; detail disk</font></p>  <blockquote>   <p>Note the drive letter listed in the column labeled <font face="Courier New">LTR</font>.</p> </blockquote>  <p><font face="Courier New">DISKPART&gt; exit</font></p>  <p><font face="Courier New">C:\Users\eduncan911&gt; xcopy d:*.* g:\ /E /F</font></p>  <blockquote>   <p>Where d:\ is your mounted ISO or DVD you want to copy from, and g:\ is the USB device to copy to.</p> </blockquote>  <p><font face="Courier New">C:\Users\eduncan911&gt; exit</font></p>  <p>And that&rsquo;s it.&nbsp; Go stick it in something and boot it.</p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Managed Extensibility Framework (MEF) - Microsoft's Official Inversion of Control Container]]></title>
    <link href="http://eduncan911.com/blog/archives/managed-extensibility-framework-mef-microsofts-official-inversion-of-control-container.html"/>
    <updated>2010-02-16T00:50:00-05:00</updated>
    <id>http://eduncan911.com/blog/archives/managed-extensibility-framework-mef-microsofts-official-inversion-of-control-container</id>
    <content type="html"><![CDATA[<!-- more -->


<p><blockquote><p>Please note that this post was migrated to my new blog platform. There may be bad formating, broken links, images, downloads and so on.  If you need an item on this page, please contact me and I will do my best to get it from my backups.</p><footer><strong>~E</strong></footer></blockquote></p>

<p>This new Microsoft feature in .NET Framework 4 is a programming model for reusing components, very similar to those Inversion of Control container frameworks out there that we all know and love (Castle Windsor, Structured Map, their own Unity from the Patterns and Practices team and etc).&nbsp; Now, they have built their own to address the pain points of these frameworks called the Managed Extensibility Framework, or MEF for short.</p>


<p> <p>I was pleasantly surprised this weekend when reading the February 02010&rsquo;s issue of MSDN Magazine.&nbsp; Getting up-to-speed on some new features in .NET Framework 4, I saw the headline &ldquo;<a href="http://msdn.microsoft.com/en-us/magazine/ee291628.aspx" target="_blank">Building Composable Apps in .NET 4 with the Managed Extensibility Framework</a>&rdquo; by Glenn Block.&nbsp; Yeah, it just rolls off your tongue eh?&nbsp; So I decided I had a few minutes while waiting for the water to boil and scanned the article.&nbsp; I am glad I did.</p> <p>In this post, I will try to give a very brief overview on how to use MEF coming from a background of using other Inversion of Control (IoC) containers, including some of the gotchas that you must be aware of during the switch.&nbsp; Yeah, you will want to make the switch &ndash; the switch away from those other bulky frameworks.&nbsp; I, for one, am officially announcing my abandonment of Castle and Unity for all future projects.&nbsp; Because once you add-in .NET 4&rsquo;s new data annotations for seriously improved validation, mixed with MEF, the only other 3rd party component I am left with is Castle&rsquo;s Logger abstraction &ndash; which I am hoping I can find a replacement for with .NET 4&rsquo;s new features.</p> <h2>MEF Terminology</h2> <p>First and fore-most for those of you already using an IoC container, it&rsquo;s time for a quick review on what MEF calls a few things and concepts.&nbsp; Below is a table I whipped up to help compare the two terminologies (the MEF portions largely taken from Glenn&rsquo;s excellent article).</p> <p>&nbsp;<img style="border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px" title="2-15-2010 10-41-32 PM" border="0" alt="2-15-2010 10-41-32 PM" src="http://eduncan911.com/blog/archives/images/ManagedExtensibilityFrameworkMicrosoftsO_A9C4/2152010104132PM_3.png" width="832" height="649"> </p> <p>Below is an image from Glenn&rsquo;s article that helps visualize the concepts above of MEF.</p> <p><img style="border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px" title="ee291628_Block_Fig1(en-us,MSDN_10)" border="0" alt="ee291628_Block_Fig1(en-us,MSDN_10)" src="http://eduncan911.com/blog/archives/images/ManagedExtensibilityFrameworkMicrosoftsO_A9C4/ee291628_Block_Fig1enusMSDN_10.png" width="413" height="288"> </p> <p>You can see that the overall concept is called Composition.&nbsp; A &lsquo;part&rsquo; is the type or service you want to export.&nbsp; The part (or parts) is marked for Export via Contracts (which are automatic).&nbsp; And other parts that want to ask for another part can do so by Importing.</p> <h2>Managed Extensibility Framework &ndash; Why they built it</h2> <p>Glenn mentions in the article that they needed a way to compose of reusable types or components in the up coming Visual Studio 2010, Oslo, Acropolis and I am sure many more.&nbsp; What is important to note is why they created one themselves, instead of using Unity or alike.&nbsp; Glenn mentions some key points:</p> <ul> <li>Third-party Extensibility (allowing vendors to generate plug-ins for Visual Studio, or your own application, with minimal work on your part now)  <li>Other frameworks were too heavyweight for a simple programming model.&nbsp; <li>Or other frameworks required too much effort on the part of either the host or the extension developer. </li></ul> <p>Those last two is what struck a cord with me, and got my attention.&nbsp; Try to sit back and think about how you would allow your applications to be extended with Castle, StructureMap or even Unity.&nbsp; That&rsquo;s a lot of work, a lot of 3rd party assemblies to wire up and configure properly.&nbsp; Especially if you want runtime changes, which MEF supports out of the box with no configuration.</p> <p>That last point is particularly interesting.&nbsp; All too often I see a released developer framework or contrib project by a group of inspired individuals.&nbsp; This is great and all, but those projects quickly grow to be a large project requiring documentation, support, and even refactorings for performance.</p> <p>It got me thinking a lot about what I see wrong with Castle &ndash; only two things, it&rsquo;s learning curve and size.&nbsp; While Unity was very well documented, it comes with some significant bloat and only what I can refer to as hoop-jumping.&nbsp; The earlier versions of Unity violated Dependency Injection pricipals and concepts (no ctor injection!).&nbsp; Perfect example of refactoring.</p> <p>MEF really strives to resolve all of these issues, with some extremely simple programming models that I will show you below.</p> <p></p> <h2>MEF Programming Models &ndash; Straight Attributed Declarations</h2> <p>Another rip from Glenn&rsquo;s article.&nbsp;&nbsp; But he did it so well.</p> <blockquote> <p>Developers consume MEF through a programming model.&nbsp; A programming model provides a means to declare components as MEF parts.&nbsp; Out of the box, MEF provides an attributed programming model, which will be the main focus of this article.&nbsp; That model is just one of many possible programming models that MEF enables.&nbsp; MEF&rsquo;s core API is completely agnostic to attributes.</p></blockquote> <p>Yep, you heard that right.&nbsp; MEF supports Attributes &ndash; for out-of-the-box functionality.&nbsp; No configuration, no setup, nothing.&nbsp; This is so much easier than you are even thinking.&nbsp; So much so, I feel guilty by writing all of this text.&nbsp; Let&rsquo;s just show you how it&rsquo;s done now.</p> <h2>The Blog &ldquo;Hello World&rdquo; Snippets</h2> <p>As what seems to be an invasion, the common Hello World for websites these days <a href="http://invalidlogic.com/2008/12/22/blogging-apps-are-the-new-hello-world/" target="_blank">are blogs</a>.&nbsp; So without further delay, here&rsquo;s some code snippets.</p> <p>The post object</p> <p></p><pre><code>
public partial class Post
{</p>

<pre><code>public Int32 PostId { get; set; }
public String Title { get; set; }
public String Description { get; set; }
public String Body { get; set; }
public Guid AuthorId { get; set; }
</code></pre>

<p>}</p>

<p></code></pre></p>

<p></p>


<p>And the PostService that will service the post.</p>


<p></p>


<pre><code>
[Export(typeof(IPostService))]
public class PostService : IPostService
{
    [Import]
    public IPostRepository PostRepository { get; set; }

    public Post FetchById(Int32 postId)
    {
        return
            (from p in PostRepository.GetAll()
             where p.PostId == postId
             select p as Post).FirstOrDefault();
    }
}

</code></pre>


<p>Please note that the above code is not production-code.&nbsp; You should always provide proper cache, concurrency and disposable patterns.&nbsp; This code has been cleaned up for easier reading.</p>


<p>Notice that the PostService has been marked to be exportable, using a specific contract type for IPostService. Now, you do not have to specify the contract type or name. You can simply use [Export]. But remember, we do want to allow for simply extensibility in the future by plugging in different components to be served during composition.&nbsp; How to do that?&nbsp; Easy, just specify the interface type as the contract.&nbsp; Now how easy was that?</p>


<p>Also, notice that we have a dependency on IPostRepository. This is marked with the simple [Import] attribute.&nbsp; It does exactly as you think.&nbsp; MEF composes the first part that matches the contract for IPostRepository and supplies it </p>


<p>Now, some will cry fowl here since I am not directly injecting IPostRepository, or not demanding it in the constructor. Yes, MEF fully supports constructor injection. But, there is a few gotchas you have to be aware of with MEF and constructor composition that I get into a little further down. There's also a new pattern I am designing, when mixed with .NET 4 and some nifty T4 templates I'm tinkering with. That's another article I'll write though. Check the comments, or leave a comment for more information on, "Managing BDD Contexts and Mocks Automatically with .NET 4, MEF, and T4 Templates." Nice. I just named my next blog post. </p>


<h2>Constructor Dependency Injection - MEF Gotcha</h2>


<p>As mentioned above, constructor injection is a bit tricky with MEF.&nbsp; There are some rules to follow:</p>


<ul>
<li>MEF assumes all parameters are imports, making the import attribute unnecessary.&nbsp; I leave it up to the reader to figure out how to get around this. 
<li>Recomposition is not supported on constructor parameters.</li></ul>


<p>That last one is almost a deal breaker for me.&nbsp; Recomposition is a feature of MEF that allows parts to automatically have their imports updated as new matching exports appear in the system.&nbsp; Given, this isn't the case with most websites out there.&nbsp; It's an issue for websites and applications that want to support dynamic (e.g. downloadable) plugins.&nbsp; The plugins would overwrite, at runtime, certain contracts and therefore allow the parts to automatically be updated with the new plugin versions - all without an application restart!</p>


<p>So with that said (and you will never be developing plugins right?), you can use constructor injection with MEF as follows.</p>


<p><p><pre><code>
[Export(typeof(IPostService))]
public class PostService : IPostService
{</p>

<pre><code>private IPostRepository _postRepo;
private IUserRepository _userRepo

[ImportingConstructor]
public PostService(IPostRepository postRepo, IUserRepository userRepo)
{
    _postRepo = postRepo;
    _userRepo = userRepo;
}

public Post FetchById(Int32 postId)
{
    return
        (from p in _postRepo.GetAll()
         where p.PostId == postId
         select p as Post).FirstOrDefault();
}
</code></pre>

<p>}</p>

<p></code></pre>
<p>Don&rsquo;t fret too much though about the all-or-nothing constructor.&nbsp; You have a Factory option later on in this post.</p>
<h2>Bootstrapping MEF for Application Startup</h2>
<p>Glenn nailed it right on the head when he called this procedure &ldquo;bootstrapping.&rdquo;&nbsp; I&rsquo;ve always struggled with the proper terminology for this composition process with other Inversion of Control containers.&nbsp; Bootstrapping.&nbsp; Yep, just like my hacked MP3 players have.</p>
<p>To get things up and running, you will need to to insert some bootstrapping code for your application.&nbsp; This code is required with any type of IoC container, and with MEF as well.</p>
<p>Below is a small code snippet from a typical ASP.NET MVC 2 global.asax file.&nbsp; Notice I added the two using blocks at the end of the Application_Start().&nbsp; This process would be the same for any type of application you have.</p>
<p><pre><code>
using System.ComponentModel.Composition;
using System.ComponentModel.Composition.Hosting;</p>

<p>protected void Application_Start()
{</p>

<pre><code>AreaRegistration.RegisterAllAreas();

RegisterRoutes(RouteTable.Routes);

using (var catalog = new DirectoryCatalog(@".\"))
{
    using (var container = new CompositionContainer(catalog))
    {
        container.ComposeParts(this);
    }
}
</code></pre>

<p>}</p>

<p></code></pre>
<p></p>
<p>Now, this code is running from with the website assembly.&nbsp; If you, like me, create a seperate assembly to hold your Domain and Repository models, then you simply reference the assembly by replacing the &lsquo;this&rsquo; keyword with Assembly.GetAssembly(typeof(MyProject.Domain)).&nbsp; And yes, you can reference multiple catalogs and assemblies and build up your list as well.</p>
<p>Note that I included the namespaces here.&nbsp; This is important as normally this bootstrapping code is in the Hosting namespace.&nbsp; What they don&rsquo;t tell you is there is an extension in the namespace one higher for CompositionContainer, that enables the ComposeParts() extension method in the System.ComponentModel.Composition namespace.</p>
<p>There are tons of options here with the composition containers.&nbsp; Please refer to the .NET 4 documentation on MEF, as well as Glenn&rsquo;s article for a few more tips.&nbsp; You can specify an assembly to reference for the catalog.&nbsp; You can have aggregated catalogs for grouping/namespacing purposes.&nbsp; And yet, you can still have that aged-old configuration file if you really really really want to manually register (export) each type.</p>
<h2>All Parts are Singletons, out of the box</h2>
<p>Yep.&nbsp; All of your part&rsquo;s instances are composed and referenced throughout all of your code as singletons (or &ldquo;statics&rdquo;).&nbsp; This is a great solution for that stubborn developer you may have working in your group that just won&rsquo;t let go of static managers.&nbsp; Make it instance based, and slap an [Export] on it.&nbsp; Done, now use [Import] wherever you like.</p>
<p>This is important to note because Castle and StructuredMap both default to transient composition (Unity uses whatever you configured the container to use as default).&nbsp; So, make sure you are coding to be thread-safe if you are making the switch over to MEF.</p>
<p>But do not fret, it&rsquo;s easy to specify the lifestyle within the contract definitions.&nbsp; There are three possible configurations you can set with the [PartCreationPolicy()] attribute:</p>
<ul>
<li>CreationPolicy.Shared (singleton, default)
<li>CreationPolicy.NonShared (transient)
<li>CreationPolicy.Any</li></ul>
<p>The &ldquo;Any&rdquo; option is interesting as it leaves it up to the context configuration of the host and/or the configuration of the [Import] contract to specify.&nbsp; You can use RequiredCreationPolicy on the [Import] contract definition to specify the preference.</p>
<p><pre><code>
[PartCreationPolicy(CreationPolicy.Any)]
[Export(typeof(IUserAccountService))]
public class UserAccountService : IUserAccountService
{</p>

<pre><code>...
</code></pre>

<p>}</p>

<p>public class Post
{</p>

<pre><code>public Int32 PostId { get; set; }
public String Title { get; set; }
...

[Import(RequiredCreationPolicy=CreationPolicy.NonShared]
public IUserService UserService { get; set; }
</code></pre>

<p>}</p>

<p></pre></code>
<p>There is a problem with this concept though.&nbsp; With a current project we are working on at the moment, we identified the need to have a security context around our services to ensure the current WebRequest has the correct security credentials.&nbsp; With this, we elected to use Castle&rsquo;s WebRequest lifestyle feature.&nbsp; Sadly, this is not possible (yet) with the PartCreationPolicy.&nbsp; So it is left up to the implementer to handle custom composition on their own with a Factory pattern (see below).</p>
<h2>Lazy Loading within Entities</h2>
<p>Those of you that are wanting Lazy Loading within your entities, but are struggling with a solution that is compatible with Inversion of Control, fear not!&nbsp; The answer is now possible with MEF.</p><pre><code>
public partial class Post
{</p>

<pre><code>[Range(0, Int32.MaxValue)]
public Int32 PostId { get; set; }

[Required, StringLength(64, MinimumLength = 5)]
public String Title { get; set; }

[Required, StringLength(1024, MinimumLength = 5)]
public String Description { get; set; }

[Required, StringLength(Int32.MaxValue, MinimumLength = 5)]
public String Body { get; set; }

[Required]
public Guid AuthorId { get; set; }

[Import]
public IUserService UserService { get; set; }

private User _user;
public User Author
{
    get
    {
        if (_user == null)
            _user = UserService.FetchById(this.AuthorId);
        return _user;
    }
}
</code></pre>

<p>}</p>

<p></code></pre>
<p>With our updated Post entity, notice we now have a dependency on IUserService marked with the [Import] attribute.&nbsp; Yep, MEF composes that for you, and you have the UserService to access your lazy objects as needed.</p>
<h2>Using MEF as a Static Wrapper</h2>
<p>Time and time again I find myself writing wrapper classes around static members of a 3rd party component, just so I can unit test my code without having to rely on that static class.&nbsp; Using MEF, if you haven&rsquo;t guesses already, is just as easy as you might think.</p>
<p></p><pre><code>
public class Loggerpart
{</p>

<pre><code>[Export]
public ILogger Logger
{
    get
    {
        return LogManager.GetLogger("LoggerInstance", "config");
    }
}
</code></pre>

<p>}</p>

<p></code></pre>
<p></p>
<p>This pattern allows you to make a wrapper around any 3rd party or legacy code.</p>
<h2>MEF Composition with a Factory Pattern</h2>
<p>Here&rsquo;s another one not in Glenn&rsquo;s article.&nbsp; How to use MEF with a factory pattern to initiate a complex type.</p>
<p><pre><code>
public class UserService : IUserService
{</p>

<pre><code>public UserService(ISecurityContext securityContext)
{
    ...
}
</code></pre>

<p>}</p>

<p>public class UserServiceFactory
{</p>

<pre><code>[Export(typeof(IUserService))]
[PartCreationPolicy(CreationPolicy.Shared)]
public IUserService Instance
{
    get
    {
        var context = HttpContext.Current;
        var securityContext = 
            SecurityContextProvider.Setup(context)
        return new UserService(securityContext);
    }
}
</code></pre>

<p>}</p>

<p></code></pre>
<p></p>
<p>Notice how the UserService is not exported?&nbsp; Instead, we designate a property member of UserServiceFactory called Instance as the Export composition location.&nbsp; </p>
<p>Remember, you are only Exporting for Composition at runtime.&nbsp; Nothing gets composed during your unit tests, as you are mocking them.&nbsp; So anywhere you use [Import] will be still be mockable for any of your unit tests with this pattern.</p>
<h2>Exporting with Multiple Contracts</h2>
<p>Here&rsquo;s a nice trick, you can specify multiple Export contracts for multiple types.&nbsp; Why would you do this?&nbsp; If you are a big DDD follower, you may be using IUserService and IAccountService combined to give you an UserAccountService part.</p>
<p><pre><code>
[Export(typeof(IUserService))]
[Export(typeof(IAccountService))]
public class UserAccountService : IUserService, IAccountService
{</p>

<pre><code>...
</code></pre>

<p>}</code><code>
</pre></code>
<p></p>
<h2>MEF Does Not Blow Up on Rejection</h2>
<p>This one is going to take some getting used to.&nbsp; As Glenn mentions, MEF does not throw exceptions if a part cannot be satisfied.&nbsp; It simply will not exist in the object graph for MEF to return &ndash; you&rsquo;ll get a null, and will most likely see a NullReferenceException in your containing code that is trying to use the part you wanted to import.</p>
<p>MEF will simply reject the request for the Import of a part for a number of reasons.&nbsp; For example, if there is no part defined as the correct Export contract type.&nbsp; Say you wanted to import IUserService, but only exported UserService with [Export] and no contract type of IUserService was defined.&nbsp; That was the typical one I found myself forgetting to do.&nbsp; As recommended above, always include the Contract Type when designated a part as Export with [Export(typeof(IUserService))].</p>
<p>I agree that MEF&rsquo;s Rejection policy is a power feature because it stabilizes the code and allows debugging.&nbsp; Glenn links to a good article on why to ensure application stability: <a title="http://blogs.msdn.com/gblock/archive/2009/08/02/stable-composition-in-mef-preview-6.aspx" href="http://blogs.msdn.com/gblock/archive/2009/08/02/stable-composition-in-mef-preview-6.aspx"><a href="http://blogs.msdn.com/gblock/archive/2009/08/02/stable-composition-in-mef-preview-6.aspx">http://blogs.msdn.com/gblock/archive/2009/08/02/stable-composition-in-mef-preview-6.aspx</a></a></p>
<p>But in short, if you get Rejection happening quite often, check your Export contract definition on your part.</p>
<h2>In Summary</h2>
<p>As you can see, it is dead simple to use MEF.&nbsp; The Export functionality is what was missing with Unity, and completely with all other IoC containers.&nbsp; And, it&rsquo;s what gives MEF such great, simplistic power.&nbsp; I highly recommend reading through Glenn&rsquo;s complete article, as he covers a few other concepts such as using the new <strong>Lazy&lt;T&gt;</strong> for importing lazy exports and metadata.</p>
<p>Some additional things Glenn covers is the very strong support for debugging and tracing, things you want to be aware of if you use MEF even moderately.&nbsp; He also hints at the up-n-coming support for MEF with IronRuby.&nbsp; He also covers some external links, which I will list here (for my own archiving purposes):</p>
<ul>
<li><a href="http://codebetter.com/blogs/glenn.block/archive/2009/05/14/customizing-container-behavior-part-2-of-n-defaults.aspx" target="_blank">Customizing Container Behavior Part 2 of N &ndash; Defaults</a> for Facilities
<li><a href="http://mef.codeplex.com/releases/view/33536" target="_blank">MEF Analysis Tool (mefx) for .NET 4.0</a> for debugging those contracts in large projects
<li><a href="http://blogs.msdn.com/dsplaisted/archive/2009/06/08/a-crash-course-on-the-mef-primitives.aspx" target="_blank">A Crash Course on the MEF Primitives</a> for the underlying &ldquo;quantum universe of MEF, its Ã¼ber extensibility points&rdquo; as Glenn says</li></ul>
<p>Once concept I am tinkering with is utilizing the [Import] attribute in the attributed programming model of MEF to define the complete contexts of my BDD tests for me with all dependencies already mocked up and ready, with T4 templates largely driving that effort.</p>
<p>MEF wacked me upside the head.&nbsp; It does everything right, and even allowed me to step back and realized, &ldquo;Dang. I was bloating my code.&rdquo;&nbsp; Yes, they have done it right.&nbsp; So right that the next project I am starting this week will be on Visual Studio 2010 RC &ndash; not even released yet.&nbsp; </p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Registering MSpec Runners for TestDriven.NET on Windows X64]]></title>
    <link href="http://eduncan911.com/blog/archives/registering-mspec-runners-for-testdriven-net-on-windows-x64.html"/>
    <updated>2010-01-20T17:59:00-05:00</updated>
    <id>http://eduncan911.com/blog/archives/registering-mspec-runners-for-testdriven-net-on-windows-x64</id>
    <content type="html"><![CDATA[<!-- more -->


<p><blockquote><p>Please note that this post was migrated to my new blog platform. There may be bad formating, broken links, images, downloads and so on.  If you need an item on this page, please contact me and I will do my best to get it from my backups.</p><footer><strong>~E</strong></footer></blockquote></p>

<P>EDIT:&nbsp;MSpec v0.3 now supports <A href="http://weblogs.asp.net/nunitaddin/archive/2009/11/05/testdriven-net-2-24-xcopy-deployable-test-runners.aspx" mce_href="http://weblogs.asp.net/nunitaddin/archive/2009/11/05/testdriven-net-2-24-xcopy-deployable-test-runners.aspx">TestDriven.Net's v2.24 XCopy Deployable Test Runners</A>.&nbsp; So this blog post is legacy information at this time.&nbsp; </P>


<P><IMG style="BORDER-BOTTOM: 0px; BORDER-LEFT: 0px; DISPLAY: inline; MARGIN-LEFT: 0px; BORDER-TOP: 0px; MARGIN-RIGHT: 0px; BORDER-RIGHT: 0px" title=td_rocket2[1] border=0 alt=td_rocket2[1] align=left src="http://eduncan911.com/blog/archives/images/MSpecrunnersforTestDrive.NETonWindowsx64_AD3B/td_rocket21.gif" width=141 height=100 mce_src="/blog/archives/images/MSpecrunnersforTestDrive.NETonWindowsx64_AD3B/td_rocket21.gif"> Machine.Specifications (MSpec) is my preferred Behavior-Driven Design (BDD) framework for Microsoft.NET.&nbsp; Aaron Jensen, <A href="http://codebetter.com/blogs/aaron.jensen/archive/tags/mspec/default.aspx" target=_blank mce_href="http://codebetter.com/blogs/aaron.jensen/archive/tags/mspec/default.aspx">the author of MSpec</A>, released support for TestDriven.NET, xUnit, nUnit, and Gallio.&nbsp; And with the latest release of v0.3, it adds official support for ReSharper's Unit Tests and and Selenium integration testing.&nbsp; Very cool stuff indeed, and a very active project!</P>


<P>What has bugged me a bit is getting TestDriven.NET to see my MSpec specifications, on my Windows 7 x64 platform.&nbsp; Aaron so kindly includes a InstallTDNetRunner.bat file to register MSpec with TestDrive.NET; but, it only works on x86 systems.</P>


<P>So why does it not work with x64 systems?&nbsp; It is because the installer for TestDriven.NET registers the runners in a different registry location.</P>


<H2>Windows Vista/7 x64 (64-bit) MSpec runner TestDriven.NET registry file</H2>


<P>Below, I have created a bat file you can copy and paste into your own InstallTDNetRunner-x64.bat if you are on Windows x64.&nbsp; Or, you can download it from here: </P>


<P><A href="http://eduncan911.com/blog/binary/legacy/InstallTDNetRunner-x64.zip">/blog/binary/legacy/InstallTDNetRunner-x64.zip</A> </P>


<PRE><CODE>

@echo off &amp; if not "%ECHO%"=="" echo %ECHO%

setlocal
set LOCALDIR=%~dp0

echo Windows Registry Editor Version 5.00 &gt; MSpecTDNet.reg
echo [HKEY_CURRENT_USER\Software\MutantDesign\TestDriven.NET\TestRunners\MSpec] &gt;&gt; MSpecTDNet.reg
echo "Application"="" &gt;&gt; MSpecTDNet.reg
echo "AssemblyPath"="%LOCALDIR:\=\\%Machine.Specifications.TDNetRunner.dll" &gt;&gt; MSpecTDNet.reg
echo "TargetFrameworkAssemblyName"="Machine.Specifications" &gt;&gt; MSpecTDNet.reg
echo "TypeName"="Machine.Specifications.TDNetRunner.SpecificationRunner" &gt;&gt; MSpecTDNet.reg
echo @="5" &gt;&gt; MSpecTDNet.reg
echo. &gt;&gt; MSpecTDNet.reg

echo [HKEY_LOCAL_MACHINE\SOFTWARE\MutantDesign\TestDriven.NET\TestRunners\MSpec] &gt;&gt; MSpecTDNet.reg
echo "Application"="" &gt;&gt; MSpecTDNet.reg
echo "AssemblyPath"="%LOCALDIR:\=\\%Machine.Specifications.TDNetRunner.dll" &gt;&gt; MSpecTDNet.reg
echo "TargetFrameworkAssemblyName"="Machine.Specifications" &gt;&gt; MSpecTDNet.reg
echo "TypeName"="Machine.Specifications.TDNetRunner.SpecificationRunner" &gt;&gt; MSpecTDNet.reg
echo @="5" &gt;&gt; MSpecTDNet.reg
echo. &gt;&gt; MSpecTDNet.reg

echo [HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\MutantDesign\TestDriven.NET\TestRunners\MSpec] &gt;&gt; MSpecTDNet.reg
echo "Application"="" &gt;&gt; MSpecTDNet.reg
echo "AssemblyPath"="%LOCALDIR:\=\\%Machine.Specifications.TDNetRunner.dll" &gt;&gt; MSpecTDNet.reg
echo "TargetFrameworkAssemblyName"="Machine.Specifications" &gt;&gt; MSpecTDNet.reg
echo "TypeName"="Machine.Specifications.TDNetRunner.SpecificationRunner" &gt;&gt; MSpecTDNet.reg
echo @="5" &gt;&gt; MSpecTDNet.reg

regedit MSpecTDNet.reg

del MSpecTDNet.reg


</CODE></PRE>


<H2>Setup TestDriven.NET and MSpec</H2>


<P>Still a bit confused, getting TestDriven.NET and MSpec setup for the first time? Here's the steps to follow:</P>


<UL>
<LI>Go ahead and install TestDriven.NET.&nbsp; It can be installed and upgraded at any time. </LI>
<LI>Next, grab <A href="http://codebetter.com/blogs/aaron.jensen/archive/tags/mspec/default.aspx" target=_blank mce_href="http://codebetter.com/blogs/aaron.jensen/archive/tags/mspec/default.aspx">the latest release of MSpec</A>&nbsp; and extract the zip to a semi-permanent location.&nbsp; This is because things such as ReSharper and TestDriven.NET will need to know a common location for the mspec assemblies.&nbsp; I recommend C:\Program Files (x86)\MSpec\. 
<UL>
<LI>Included with the MSpec zip is an InstallTDNetRunner.bat, but it only works on 32-bit Windows.&nbsp; For 64-bit Windows, you want to copy my registry code above into a new file called InstallTDNetRunner-x64.bat. </LI>
<LI>Make sure to place this InstallTDNetRunner-x64.bat file in the same directory as your semi-permanent MSpec location above. </LI></UL></LI>
<LI>Finally, you want to double-click and execute the InstallTDNetRunner or InstallTDNetRunner-x64 from within this semi-permanent location.&nbsp; This will insert the registry values for a new runner called MSpec for TestDriven.NET to detect and execute. </LI></UL>


<P>From this point further, you can right-click within different places to execute your specifications within your MSpec.&nbsp; Some tips on locations you can right-click and execute the specs:</P>


<UL>
<LI>The project file: will execute all specs detected within that project. </LI>
<LI>The Namespace: will execute all specs detected within that namespace throughout the project. </LI>
<LI>Within the <FONT face="Courier New">Establish context</FONT> or <FONT face="Courier New">Because of</FONT> : Will execute all specs within that one class/scenario. </LI>
<LI>Within the <FONT face="Courier New">It</FONT> spec - Will execute just that one test. </LI></UL>


<P>Something to note is Aaron is currently upgrading MSpec (version 0.4, not released yet) to support TestDriven.NET's new 2.24 feature of version independent runners. I haven't looked completely into that myself, but should make registring TDNet runners in the future a bit easier.</P>

]]></content>
  </entry>
  
</feed>
